package Classes;

import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class InterfazBarbero extends javax.swing.JFrame {
    //Realiza la conexi√≥n a la BD
    Conexion conexion;
    
    private Point point;
    
    int idBarbero;
    String barbero;
    
    public InterfazBarbero() {
        conexion = new Conexion("barraganthebarbers");
        initComponents();
        this.setLocationRelativeTo(null);
        setIconImage(getIconImage());
        //Titulo.setText(this.barbero);
        //TextoNuevoServicio.setVisible(false);
        //TextoServiciosRealizados.setVisible(false);
        
        TextoPeriodo.setVisible(false);
        LeerPeriodo.setVisible(false);
        TextoFecha.setVisible(false);
        ElegirFecha.setVisible(false);
        BotonConfirmarServ.setVisible(false);
        BotonConfirmarProd.setVisible(false);
        
        TextoVentasServicios.setVisible(false);
        TextoVentasProductos.setVisible(false);
        ScrollVentasServ.setVisible(false);
        ScrollVentasProd.setVisible(false);
        TextoTotalServ.setVisible(false);
        TextoTotalProd.setVisible(false);
        RespuestaTotalServ1.setVisible(false);
        RespuestaTotalProd1.setVisible(false);
        TextoCantidadServ.setVisible(false);
        TextoCantidadProd.setVisible(false);
        RespuestaCantidadServ1.setVisible(false);
        RespuestaCantidadProd1.setVisible(false); 
        //TextoPrestamos.setVisible(false);
        TextoGBarbero.setVisible(false);
        RespuestaGBarbero.setVisible(false);
        TextoInsumos.setVisible(false);
        RespuestaInsumos.setVisible(false);
        TextoTicketPromedio.setVisible(false);
        RespuestaTicketPromedio.setVisible(false);
        TextoVentas2.setVisible(false);
        TextoCitas.setVisible(false);
        TextoConfirmados.setVisible(false);
        RespuestaConfirmados.setVisible(false);
        TextoCancelados.setVisible(false);
        RespuestaCancelados.setVisible(false);
        TextoTotales.setVisible(false);
        RespuestaTotales.setVisible(false);
    }

    @Override
    public Image getIconImage(){
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("Imagenes/Icono1.png")); //Carga miniatura
        return retValue;
    }
    
    public void setBarbero(int id, String nombre){
        this.idBarbero = id;
        this.barbero = nombre;
        Titulo.setText(this.barbero);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Titulo = new javax.swing.JLabel();
        BotonInicio = new javax.swing.JButton();
        MarcaDeAgua = new javax.swing.JLabel();
        BotonVentas = new javax.swing.JButton();
        ScrollVentasServ = new javax.swing.JScrollPane();
        TablaVentasServ = new javax.swing.JTable();
        TextoVentasServicios = new javax.swing.JLabel();
        TextoVentasProductos = new javax.swing.JLabel();
        TextoPeriodo = new javax.swing.JLabel();
        TextoFecha = new javax.swing.JLabel();
        BotonConfirmarServ = new javax.swing.JButton();
        BotonConfirmarProd = new javax.swing.JButton();
        ElegirFecha = new com.toedter.calendar.JDateChooser();
        LeerPeriodo = new javax.swing.JComboBox<>();
        TextoTotalServ = new javax.swing.JLabel();
        TextoTotalProd = new javax.swing.JLabel();
        RespuestaTotalServ1 = new javax.swing.JLabel();
        RespuestaTotalProd1 = new javax.swing.JLabel();
        TextoCantidadServ = new javax.swing.JLabel();
        TextoCantidadProd = new javax.swing.JLabel();
        RespuestaCantidadServ1 = new javax.swing.JLabel();
        RespuestaCantidadProd1 = new javax.swing.JLabel();
        ScrollVentasProd = new javax.swing.JScrollPane();
        TablaVentasProd = new javax.swing.JTable();
        TextoGBarbero = new javax.swing.JLabel();
        TextoInsumos = new javax.swing.JLabel();
        TextoTicketPromedio = new javax.swing.JLabel();
        RespuestaGBarbero = new javax.swing.JLabel();
        RespuestaInsumos = new javax.swing.JLabel();
        RespuestaTicketPromedio = new javax.swing.JLabel();
        TextoVentas2 = new javax.swing.JLabel();
        TextoCitas = new javax.swing.JLabel();
        TextoTotales = new javax.swing.JLabel();
        TextoCancelados = new javax.swing.JLabel();
        TextoConfirmados = new javax.swing.JLabel();
        RespuestaConfirmados = new javax.swing.JLabel();
        RespuestaCancelados = new javax.swing.JLabel();
        RespuestaTotales = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        BotonPerfil = new javax.swing.JButton();
        BotonMinimizar = new javax.swing.JButton();
        BotonSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(52, 73, 94));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Titulo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Titulo.setForeground(new java.awt.Color(255, 255, 255));
        Titulo.setToolTipText("");
        Titulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(Titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 30));

        BotonInicio.setBackground(new java.awt.Color(95, 106, 106));
        BotonInicio.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BotonInicio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Regresar Inicio.png"))); // NOI18N
        BotonInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonInicioActionPerformed(evt);
            }
        });
        jPanel1.add(BotonInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 80, 40));

        MarcaDeAgua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Icono1_2.png"))); // NOI18N
        MarcaDeAgua.setText("jLabel1");
        jPanel1.add(MarcaDeAgua, new org.netbeans.lib.awtextra.AbsoluteConstraints(1410, 770, 40, 40));

        BotonVentas.setBackground(new java.awt.Color(154, 125, 10));
        BotonVentas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Ventas2.png"))); // NOI18N
        BotonVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonVentasActionPerformed(evt);
            }
        });
        jPanel1.add(BotonVentas, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 0, 150, 80));

        TablaVentasServ.setBackground(new java.awt.Color(154, 125, 10));
        TablaVentasServ.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        TablaVentasServ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ScrollVentasServ.setViewportView(TablaVentasServ);

        jPanel1.add(ScrollVentasServ, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 880, 440));

        TextoVentasServicios.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        TextoVentasServicios.setForeground(new java.awt.Color(255, 255, 255));
        TextoVentasServicios.setText("Servicios");
        jPanel1.add(TextoVentasServicios, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 130, 110, 30));

        TextoVentasProductos.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        TextoVentasProductos.setForeground(new java.awt.Color(255, 255, 255));
        TextoVentasProductos.setText("Productos");
        jPanel1.add(TextoVentasProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, 120, 30));

        TextoPeriodo.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        TextoPeriodo.setText("Periodo");
        jPanel1.add(TextoPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 80, -1, 40));

        TextoFecha.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        TextoFecha.setText("Fecha");
        jPanel1.add(TextoFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 80, -1, 40));

        BotonConfirmarServ.setBackground(new java.awt.Color(202, 111, 30));
        BotonConfirmarServ.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        BotonConfirmarServ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Palomita.png"))); // NOI18N
        BotonConfirmarServ.setText("Servicios");
        BotonConfirmarServ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonConfirmarServActionPerformed(evt);
            }
        });
        jPanel1.add(BotonConfirmarServ, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 180, 140, 40));

        BotonConfirmarProd.setBackground(new java.awt.Color(202, 111, 30));
        BotonConfirmarProd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        BotonConfirmarProd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Palomita.png"))); // NOI18N
        BotonConfirmarProd.setText("Productos");
        BotonConfirmarProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonConfirmarProdActionPerformed(evt);
            }
        });
        jPanel1.add(BotonConfirmarProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 180, 140, 40));
        jPanel1.add(ElegirFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 130, 140, 40));

        LeerPeriodo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        LeerPeriodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "Dia", "Semanal", "Mensual", "Anual", "Siempre" }));
        LeerPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeerPeriodoActionPerformed(evt);
            }
        });
        jPanel1.add(LeerPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 130, 140, 40));

        TextoTotalServ.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoTotalServ.setText("Total:");
        jPanel1.add(TextoTotalServ, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 600, 60, 40));

        TextoTotalProd.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoTotalProd.setText("Total:");
        jPanel1.add(TextoTotalProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 600, 60, 40));

        RespuestaTotalServ1.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaTotalServ1.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaTotalServ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 600, 180, 40));

        RespuestaTotalProd1.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaTotalProd1.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaTotalProd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 600, 150, 40));

        TextoCantidadServ.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoCantidadServ.setText("Cantidad:");
        jPanel1.add(TextoCantidadServ, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 600, -1, 40));

        TextoCantidadProd.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoCantidadProd.setText("Cantidad:");
        jPanel1.add(TextoCantidadProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 600, -1, 40));

        RespuestaCantidadServ1.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaCantidadServ1.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaCantidadServ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 600, 110, 40));

        RespuestaCantidadProd1.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaCantidadProd1.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaCantidadProd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 600, 110, 40));

        TablaVentasProd.setBackground(new java.awt.Color(154, 125, 10));
        TablaVentasProd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        TablaVentasProd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ScrollVentasProd.setViewportView(TablaVentasProd);

        jPanel1.add(ScrollVentasProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 880, 440));

        TextoGBarbero.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoGBarbero.setText("Ganancia Barbero:");
        jPanel1.add(TextoGBarbero, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 300, -1, 30));

        TextoInsumos.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoInsumos.setText("Insumos:");
        jPanel1.add(TextoInsumos, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 350, -1, 30));

        TextoTicketPromedio.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoTicketPromedio.setText("Ticket Promedio:");
        jPanel1.add(TextoTicketPromedio, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 400, -1, 30));

        RespuestaGBarbero.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaGBarbero.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaGBarbero, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 300, 160, 30));

        RespuestaInsumos.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaInsumos.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaInsumos, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 350, 160, 30));

        RespuestaTicketPromedio.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaTicketPromedio.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaTicketPromedio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 400, 160, 30));

        TextoVentas2.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        TextoVentas2.setForeground(new java.awt.Color(154, 125, 10));
        TextoVentas2.setText("VENTAS");
        jPanel1.add(TextoVentas2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 250, 130, 40));

        TextoCitas.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        TextoCitas.setForeground(new java.awt.Color(154, 125, 10));
        TextoCitas.setText("CITAS");
        jPanel1.add(TextoCitas, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 440, 100, 40));

        TextoTotales.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoTotales.setText("Totales:");
        jPanel1.add(TextoTotales, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 570, -1, 30));

        TextoCancelados.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoCancelados.setText("Canceladas:");
        jPanel1.add(TextoCancelados, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 530, -1, 30));

        TextoConfirmados.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoConfirmados.setText("Confirmadas:");
        jPanel1.add(TextoConfirmados, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 490, 140, -1));

        RespuestaConfirmados.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaConfirmados.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaConfirmados, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 490, 120, 30));

        RespuestaCancelados.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaCancelados.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaCancelados, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 530, 120, 30));

        RespuestaTotales.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaTotales.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaTotales, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 570, 120, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/LogoBarragan48px.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 610, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1300, 660));

        jPanel3.setBackground(new java.awt.Color(52, 73, 94));
        jPanel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel3MouseDragged(evt);
            }
        });
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel3MousePressed(evt);
            }
        });
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BotonPerfil.setBackground(new java.awt.Color(95, 106, 106));
        BotonPerfil.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BotonPerfil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Perfil.png"))); // NOI18N
        BotonPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonPerfilActionPerformed(evt);
            }
        });
        jPanel3.add(BotonPerfil, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        BotonMinimizar.setBackground(new java.awt.Color(95, 106, 106));
        BotonMinimizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Minimize_1.png"))); // NOI18N
        BotonMinimizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonMinimizarActionPerformed(evt);
            }
        });
        jPanel3.add(BotonMinimizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 0, 90, 30));

        BotonSalir.setBackground(new java.awt.Color(203, 67, 53));
        BotonSalir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BotonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Exit.png"))); // NOI18N
        BotonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalirActionPerformed(evt);
            }
        });
        jPanel3.add(BotonSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 0, 90, 30));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonInicioActionPerformed
        conexion.Desconectar();
        Interfaz vI = new Interfaz();
        vI.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_BotonInicioActionPerformed

    private void BotonPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonPerfilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BotonPerfilActionPerformed

    private void BotonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSalirActionPerformed
        conexion.Desconectar();
        System.exit(0);
    }//GEN-LAST:event_BotonSalirActionPerformed

    private void BotonMinimizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonMinimizarActionPerformed
        this.setExtendedState(ICONIFIED);
    }//GEN-LAST:event_BotonMinimizarActionPerformed

    private void BotonVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonVentasActionPerformed
        BotonVentas.setEnabled(false);
        
        //BotonPrestamos.setEnabled(true);         //Activar los otros botones
        TextoPeriodo.setVisible(true);
        LeerPeriodo.setVisible(true);
        TextoFecha.setVisible(true);
        ElegirFecha.setVisible(true);
        BotonConfirmarServ.setVisible(true);
        BotonConfirmarProd.setVisible(true);
              
        //TextoPrestamos.setVisible(false);
    }//GEN-LAST:event_BotonVentasActionPerformed

    private void jPanel3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MousePressed
        point = evt.getPoint();
        getComponentAt(point);
    }//GEN-LAST:event_jPanel3MousePressed

    private void jPanel3MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseDragged
        int CurrentX = this.getLocation().x;
        int CurrentY = this.getLocation().y;
        
        int MoveX = (CurrentX + evt.getX()) - (CurrentX + point.x);
        int MoveY = (CurrentY + evt.getY()) - (CurrentY + point.y);
        
        int x = CurrentX + MoveX;
        int y = CurrentY + MoveY;
        
        this.setLocation(x,y);
    }//GEN-LAST:event_jPanel3MouseDragged

    private void BotonConfirmarServActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonConfirmarServActionPerformed
        TextoTotalServ.setVisible(false);
        RespuestaTotalServ1.setVisible(false);
        TextoTotalProd.setVisible(false);
        RespuestaTotalProd1.setVisible(false);
        TextoCantidadServ.setVisible(false);
        RespuestaCantidadServ1.setVisible(false);
        TextoCantidadProd.setVisible(false);
        RespuestaCantidadProd1.setVisible(false);
        ScrollVentasServ.setVisible(false);
        ScrollVentasProd.setVisible(false);
        TextoVentasServicios.setVisible(false);
        TextoVentasProductos.setVisible(false);
        TextoGBarbero.setVisible(false);
        RespuestaGBarbero.setVisible(false);
        TextoInsumos.setVisible(false);
        RespuestaInsumos.setVisible(false);
        TextoTicketPromedio.setVisible(false);
        RespuestaTicketPromedio.setVisible(false);
        TextoVentas2.setVisible(false);
        TextoCitas.setVisible(false);
        TextoConfirmados.setVisible(false);
        RespuestaConfirmados.setVisible(false);
        TextoCancelados.setVisible(false);
        RespuestaCancelados.setVisible(false);
        TextoTotales.setVisible(false);
        RespuestaTotales.setVisible(false);
        if(LeerPeriodo.getSelectedItem().toString().compareTo("...")==0  || ElegirFecha.getDate() == null)
            JOptionPane.showMessageDialog(null,"Seleccione Todos los campos.");
        else{    
            //System.out.println(idBarbero);
            //Fecha De Hoy
            Date fechaActual = new Date();
            String f;
            SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
            f = formatoFecha.format(fechaActual);   //Contiene la fecha de hoy
            //System.out.println("Fecha de Hoy:"+f);
                
            //Fecha Seleccionada
            Date fechaSeleccionada = ElegirFecha.getDate();
            String f2;
            SimpleDateFormat formatoFecha2 = new SimpleDateFormat("yyyy-MM-dd");
            f2 = formatoFecha2.format(fechaSeleccionada);   //Contiene la fecha Seleccionada
            //System.out.println("Fecha Seleccionada:"+f2);
            if(f2.compareTo(f) > 0)
                JOptionPane.showMessageDialog(null,"La fecha:"+f2+" es mayor a la actual "+f+".");
            else{
                String sqlVS;
                String sqlVST;
                String sqlCACanceladas;
                String sqlCAConfirmadas;
                String sqlCATotales;
                String p = LeerPeriodo.getSelectedItem().toString();
                boolean banderita=false;
                switch (p) {
                    case "Dia" -> {
                        sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND agenda.fecha = '"+f2+"' AND agenda.id_barbero = "+idBarbero+" ";
                        sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND agenda.fecha = '"+f2+"' AND agenda.id_barbero = "+idBarbero+" ";
                        sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.fecha = '"+f2+"' AND agenda.id_barbero = "+idBarbero+" ";
                        ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                        
                        sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                            + "FROM barberos, servicios, ventasservicios "
                            + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"' AND barberos.id_barbero = "+idBarbero+" "
                            + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                        banderita = ConsultarVentasS(sqlVS,f2,p);
                        if(banderita == true){
                            sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                    + "FROM barberos, ventasservicios "
                                    + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"' AND barberos.id_barbero = "+idBarbero+" ";
                            ConsultarVentasTotalS(sqlVST);
                        }
                    }
                    case "Semanal" -> {
                        sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND WEEKOFYEAR(agenda.fecha) = WEEKOFYEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                        sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND WEEKOFYEAR(agenda.fecha) = WEEKOFYEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+"";
                        sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE WEEKOFYEAR(agenda.fecha) = WEEKOFYEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+"";
                        ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                        
                        sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                + "FROM barberos, servicios, ventasservicios "
                                + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                        banderita = ConsultarVentasS(sqlVS,f2,p);
                        if(banderita == true){
                            sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                + "FROM barberos, ventasservicios "
                                + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                            ConsultarVentasTotalS(sqlVST);
                        }
                    }
                    case "Mensual" -> {
                        sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND MONTH(agenda.fecha) = MONTH('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                        sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND MONTH(agenda.fecha) = MONTH('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                        sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE MONTH(agenda.fecha) = MONTH('"+f2+"') AND agenda.id_barbero = "+idBarbero+"";
                        ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                        
                        sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                + "FROM barberos, servicios, ventasservicios "
                                + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                        banderita = ConsultarVentasS(sqlVS,f2,p);
                        if(banderita == true){
                            sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                    + "FROM barberos, ventasservicios "
                                    + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                            ConsultarVentasTotalS(sqlVST);
                        }
                    }
                    case "Anual" -> {
                        sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND YEAR(agenda.fecha) = YEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                        sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND YEAR(agenda.fecha) = YEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                        sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE YEAR(agenda.fecha) = YEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+"";
                        ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                        
                        sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                + "FROM barberos, servicios, ventasservicios "
                                + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                        if(banderita == true){
                            sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                + "FROM barberos, ventasservicios "
                                + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                            ConsultarVentasTotalS(sqlVST);
                        }
                    }
                    case "Siempre" ->{
                        sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND agenda.id_barbero = "+idBarbero+" ";
                        sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND agenda.id_barbero = "+idBarbero+" ";
                        sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.id_barbero = "+idBarbero+" ";
                        ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                        
                        sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                            + "FROM barberos, servicios, ventasservicios "
                            + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND barberos.id_barbero = "+idBarbero+" "
                            + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                        banderita = ConsultarVentasS(sqlVS,f2,p);
                        if(banderita == true){
                            sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                + "FROM barberos, ventasservicios "
                                + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND barberos.id_barbero = "+idBarbero+" ";
                            ConsultarVentasTotalS(sqlVST);
                        }
                    }
                    default -> {
                        //System.out.println("CACA");
                    }
                }
            }
        } 
    }//GEN-LAST:event_BotonConfirmarServActionPerformed

    private void BotonConfirmarProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonConfirmarProdActionPerformed
        TextoTotalServ.setVisible(false);
        RespuestaTotalServ1.setVisible(false);
        TextoTotalProd.setVisible(false);
        RespuestaTotalProd1.setVisible(false);
        TextoCantidadServ.setVisible(false);
        RespuestaCantidadServ1.setVisible(false);
        TextoCantidadProd.setVisible(false);
        RespuestaCantidadProd1.setVisible(false);
        ScrollVentasServ.setVisible(false);
        ScrollVentasProd.setVisible(false);
        TextoVentasServicios.setVisible(false);
        TextoVentasProductos.setVisible(false);
        TextoGBarbero.setVisible(false);
        RespuestaGBarbero.setVisible(false);
        TextoInsumos.setVisible(false);
        RespuestaInsumos.setVisible(false);
        TextoTicketPromedio.setVisible(false);
        RespuestaTicketPromedio.setVisible(false);
        TextoVentas2.setVisible(false);
        TextoCitas.setVisible(false);
        TextoConfirmados.setVisible(false);
        RespuestaConfirmados.setVisible(false);
        TextoCancelados.setVisible(false);
        RespuestaCancelados.setVisible(false);
        TextoTotales.setVisible(false);
        RespuestaTotales.setVisible(false);
        if(LeerPeriodo.getSelectedItem().toString().compareTo("...")==0  || ElegirFecha.getDate() == null)
            JOptionPane.showMessageDialog(null,"Seleccione Todos los campos.");
        else{           
            //Fecha De Hoy
            Date fechaActual = new Date();
            String f;
            SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
            f = formatoFecha.format(fechaActual);   //Contiene la fecha de hoy
            //System.out.println("Fecha de Hoy:"+f);
                
            //Fecha Seleccionada
            Date fechaSeleccionada = ElegirFecha.getDate();
            String f2;
            SimpleDateFormat formatoFecha2 = new SimpleDateFormat("yyyy-MM-dd");
            f2 = formatoFecha2.format(fechaSeleccionada);   //Contiene la fecha Seleccionada
            //System.out.println("Fecha Seleccionada:"+f2);
            if(f2.compareTo(f) > 0)
                JOptionPane.showMessageDialog(null,"La fecha:"+f2+" es mayor a la actual "+f+".");
            else{
                String sqlVP;
                String sqlVPT;
                String p = LeerPeriodo.getSelectedItem().toString();
                boolean banderita=false;
                switch (p) {
                    case "Dia" -> {
                        sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                + "FROM barberos, productos, ventasproductos "
                                + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"' AND barberos.id_barbero = "+idBarbero+" "
                                + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                        banderita = ConsultarVentasP(sqlVP,f2,p);
                        if(banderita == true){
                            sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                    + "FROM barberos, ventasproductos "
                                    + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"' AND barberos.id_barbero = "+idBarbero+" ";
                            ConsultarVentasTotalP(sqlVPT);
                        }
                    }
                    case "Semanal" -> {
                        sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                + "FROM barberos, productos, ventasproductos "
                                + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                        banderita = ConsultarVentasP(sqlVP,f2,p);
                        if(banderita == true){
                            sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                    + "FROM barberos, ventasproductos "
                                    + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                            ConsultarVentasTotalP(sqlVPT);
                        }
                    }
                    case "Mensual" -> {
                        sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                + "FROM barberos, productos, ventasproductos "
                                + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                        banderita = ConsultarVentasP(sqlVP,f2,p);
                        if(banderita == true){
                            sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                    + "FROM barberos, ventasproductos "
                                    + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                            ConsultarVentasTotalP(sqlVPT);
                        }
                    }
                    case "Anual" -> {
                        sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                + "FROM barberos, productos, ventasproductos "
                                + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                        banderita = ConsultarVentasP(sqlVP,f2,p);
                        if(banderita == true){
                            sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                    + "FROM barberos, ventasproductos "
                                    + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                            ConsultarVentasTotalP(sqlVPT);
                        }
                    }
                    case "Siempre" -> {
                        sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                + "FROM barberos, productos, ventasproductos "
                                + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND barberos.id_barbero = "+idBarbero+" "
                                + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                        banderita = ConsultarVentasP(sqlVP,f2,p);
                        if(banderita == true){
                            sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                    + "FROM barberos, ventasproductos "
                                    + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND barberos.id_barbero = "+idBarbero+" ";
                            ConsultarVentasTotalP(sqlVPT);
                        }
                    }
                    default -> {
                        //System.out.println("CACA");
                    }
                }
            }
        }
    }//GEN-LAST:event_BotonConfirmarProdActionPerformed

    private void LeerPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeerPeriodoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LeerPeriodoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazBarbero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazBarbero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazBarbero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazBarbero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazBarbero().setVisible(true);
            }
        });
    }
    
    
    //----------------------------------------Ventas--------------------------------------------------------------------//    
    
    boolean ConsultarVentasS(String sql,String f,String p){
        if(ValidarVentasS(sql,f,p) == true){
            DefaultTableModel modelo;
            modelo = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 4;
                }
            };

            modelo.addColumn("Precio");
            modelo.addColumn("Servicio");
            modelo.addColumn("Fecha");
            modelo.addColumn("Hora");
            TablaVentasServ.setModel(modelo);

            Object[] cliente = new Object [4];

            try{
                Statement st;
                ResultSet rs;
                int cont = 0;

                st = conexion.cx.createStatement();
                rs = st.executeQuery(sql);
                //ERROR modelo = (DefaultTableModel) TablaVentasServ.getModel();
                while(rs.next()){
                    //rs.getInt("id");
                    cliente [0] = "$"+rs.getString(1);
                    cliente [1] = rs.getString(2);
                    cliente [2] = rs.getString(3);
                    cliente [3] = rs.getString(4);
                    modelo.addRow(cliente);
                    cont++;
                }
                TablaVentasServ.setModel(modelo);
                RespuestaCantidadServ1.setText(""+cont);
                return true;
            }catch(SQLException e){

            }
        }
        return false;
    }
    
    boolean ValidarVentasS(String sql,String f,String p){
        try {
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            
            if(rs.next()){
                TextoTotalServ.setVisible(true);
                RespuestaTotalServ1.setVisible(true);
                TextoCantidadServ.setVisible(true);
                RespuestaCantidadServ1.setVisible(true);
                ScrollVentasServ.setVisible(true);
                TextoVentasServicios.setVisible(true);
                TextoGBarbero.setVisible(true);
                RespuestaGBarbero.setVisible(true);
                TextoInsumos.setVisible(true);
                RespuestaInsumos.setVisible(true);
                TextoTicketPromedio.setVisible(true);
                RespuestaTicketPromedio.setVisible(true);
                TextoVentas2.setVisible(true);
                return true;
            }else{
                TextoTotalServ.setVisible(false);
                RespuestaTotalServ1.setVisible(false);
                TextoCantidadServ.setVisible(false);
                RespuestaCantidadServ1.setVisible(false);
                ScrollVentasServ.setVisible(false);
                TextoVentasServicios.setVisible(false);
                TextoGBarbero.setVisible(false);
                RespuestaGBarbero.setVisible(false);
                TextoInsumos.setVisible(false);
                RespuestaInsumos.setVisible(false);
                TextoTicketPromedio.setVisible(false);
                RespuestaTicketPromedio.setVisible(false);
                TextoVentas2.setVisible(false);
                JOptionPane.showMessageDialog(null, "No se registraron ventas de SERVICIOS en la FECHA: "+f+" con PERIODO: "+p+".");
                return false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    void ConsultarVentasTotalS(String sql){
        DecimalFormat formato1 = new DecimalFormat("#.0");
        if(ValidarVentasTotalS(sql)==true){
            try{
                Statement st;
                ResultSet rs;

                st = conexion.cx.createStatement();
                rs = st.executeQuery(sql);
                rs.next();
                String o;
                double o2, gBarberia, gBarbero, insumos,ticketP;
                o = rs.getString("Total");
                o2 = Double.parseDouble(o);
                ticketP = Double.parseDouble(RespuestaCantidadServ1.getText());
                ticketP = ticketP = o2/ticketP;
                
                gBarberia = (double) ((o2)*(0.55));
                gBarbero = (double) ((o2)*(0.40));
                insumos = (double) ((o2)*(0.05));

                RespuestaTotalServ1.setText("$"+formato1.format(o2));
                RespuestaGBarbero.setText("$"+formato1.format(gBarbero));
                RespuestaInsumos.setText("$"+formato1.format(insumos));
                RespuestaTicketPromedio.setText("$"+formato1.format(ticketP));
            }catch(SQLException e){

            }
        }
    }
    
    boolean ValidarVentasTotalS(String sql){
        try {
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            
            if(rs.next())
                return true;
            else
                return false;
        } catch (SQLException ex) {
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    boolean ConsultarVentasP(String sql,String f,String p){
        if(ValidarVentasP(sql,f,p)==true){
            DefaultTableModel modelo;
            modelo = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 4;
                }
            };

            modelo.addColumn("Precio");
            modelo.addColumn("Producto");
            modelo.addColumn("Fecha");
            modelo.addColumn("Hora");
            TablaVentasProd.setModel(modelo);

            Object[] cliente = new Object [4];

            try{
                Statement st;
                ResultSet rs;
                int cont = 0;

                st = conexion.cx.createStatement();
                rs = st.executeQuery(sql);
                //ERROR modelo = (DefaultTableModel) TablaVentasServ.getModel();
                while(rs.next()){
                    //rs.getInt("id");
                    cliente [0] = "$"+rs.getString(1);
                    cliente [1] = rs.getString(2);
                    cliente [2] = rs.getString(3);
                    cliente [3] = rs.getString(4);
                    modelo.addRow(cliente);
                    cont++;
                }
                TablaVentasProd.setModel(modelo);
                RespuestaCantidadProd1.setText(""+cont);
                return true;
            }catch(SQLException e){

            }
        }
        return false;
    }
    
    boolean ValidarVentasP(String sql, String f, String p){
        try {
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            
            if(rs.next()){
                TextoTotalProd.setVisible(true);
                RespuestaTotalProd1.setVisible(true);
                TextoCantidadProd.setVisible(true);
                RespuestaCantidadProd1.setVisible(true);
                ScrollVentasProd.setVisible(true);
                TextoVentasProductos.setVisible(true);
                TextoGBarbero.setVisible(true);
                RespuestaGBarbero.setVisible(true);
                TextoInsumos.setVisible(true);
                RespuestaInsumos.setVisible(true);
                TextoTicketPromedio.setVisible(true);
                RespuestaTicketPromedio.setVisible(true);
                TextoVentas2.setVisible(true);
                return true;
            }else{
                TextoTotalProd.setVisible(false);
                RespuestaTotalProd1.setVisible(false);
                TextoCantidadProd.setVisible(false);
                RespuestaCantidadProd1.setVisible(false);
                ScrollVentasProd.setVisible(false);
                TextoVentasProductos.setVisible(false);
                TextoGBarbero.setVisible(false);
                RespuestaGBarbero.setVisible(false);
                TextoInsumos.setVisible(false);
                RespuestaInsumos.setVisible(false);
                TextoTicketPromedio.setVisible(false);
                RespuestaTicketPromedio.setVisible(false);
                TextoVentas2.setVisible(false);
                JOptionPane.showMessageDialog(null, "No se registraron ventas de PRODUCTOS en la FECHA: "+f+" con PERIODO: "+p+".");
                return false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    void ConsultarVentasTotalP(String sql){
        DecimalFormat formato1 = new DecimalFormat("#.0");
        if(ValidarVentasTotalP(sql)==true){
            try{
                Statement st;
                ResultSet rs;

                st = conexion.cx.createStatement();
                rs = st.executeQuery(sql);
                rs.next();
                String o;
                double o2, gBarberia, gBarbero, insumos,ticketP;
                o = rs.getString("Total");
                o2 = Double.parseDouble(o);
                ticketP = Double.parseDouble(RespuestaCantidadProd1.getText());
                formato1.format(ticketP = ticketP = o2/ticketP);

                gBarberia = (double) ((o2)*(0.55));
                gBarbero = (double) ((o2)*(0.40));
                insumos = (double) ((o2)*(0.05));

                RespuestaTotalProd1.setText("$"+formato1.format(o2));
                RespuestaGBarbero.setText("$"+formato1.format(gBarbero));
                RespuestaInsumos.setText("$"+formato1.format(insumos));
                RespuestaTicketPromedio.setText("$"+formato1.format(ticketP));
            }catch(SQLException e){

            }
        }
    }
    
    boolean ValidarVentasTotalP(String sql){
        try {
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            
            if(rs.next())
                return true;
            else
                return false;
        } catch (SQLException ex) {
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
       void ConsultarCitas(String sqlCACanceladas, String sqlCAConfirmadas, String sqlCATotales,String f,String p){
        DecimalFormat formato1 = new DecimalFormat("#.0");
        try{
            Statement st1,st2,st3;
            ResultSet rs1,rs2,rs3;
            
            st1 = conexion.cx.createStatement();
            st2 = conexion.cx.createStatement();
            st3 = conexion.cx.createStatement();
            rs1 = st1.executeQuery(sqlCACanceladas);
            rs2 = st2.executeQuery(sqlCAConfirmadas);
            rs3 = st3.executeQuery(sqlCATotales);
            
            rs1.next();
            rs2.next();
            rs3.next();
            
            String o1,o2,o3;
            o1 = rs1.getString("Total");
            o2 = rs2.getString("Total");
            o3 = rs3.getString("Total");
            
            float porcentajeCanceladas,porcentajeConfirmadas,cantidadTotal;
            
            porcentajeCanceladas = Float.parseFloat(o1);
            porcentajeConfirmadas = Float.parseFloat(o2);
            cantidadTotal = Float.parseFloat(o3);
            
            if(cantidadTotal == 0){
                TextoCancelados.setVisible(false);
                RespuestaCancelados.setVisible(false);
                TextoConfirmados.setVisible(false);
                RespuestaConfirmados.setVisible(false);
                TextoTotales.setVisible(false);
                RespuestaTotales.setVisible(false);
                TextoCitas.setVisible(false);
                JOptionPane.showMessageDialog(null, "No se registraron CITAS para la FECHA: "+f+" con PERIODO: "+p+".");
            }else{
                TextoCancelados.setVisible(true);
                RespuestaCancelados.setVisible(true);
                TextoConfirmados.setVisible(true);
                RespuestaConfirmados.setVisible(true);
                TextoTotales.setVisible(true);
                RespuestaTotales.setVisible(true);
                TextoCitas.setVisible(true);
                //System.out.println(porcentajeCanceladas);
                //System.out.println(porcentajeConfirmadas);

                porcentajeCanceladas = (float) (porcentajeCanceladas/cantidadTotal)*100;
                porcentajeConfirmadas = (float) (porcentajeConfirmadas/cantidadTotal)*100;

                RespuestaCancelados.setText(formato1.format(porcentajeCanceladas)+"%");
                RespuestaConfirmados.setText(formato1.format(porcentajeConfirmadas)+"%");
                RespuestaTotales.setText(o3);
            }
        }catch(SQLException e){
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonConfirmarProd;
    private javax.swing.JButton BotonConfirmarServ;
    private javax.swing.JButton BotonInicio;
    private javax.swing.JButton BotonMinimizar;
    private javax.swing.JButton BotonPerfil;
    private javax.swing.JButton BotonSalir;
    private javax.swing.JButton BotonVentas;
    private com.toedter.calendar.JDateChooser ElegirFecha;
    private javax.swing.JComboBox<String> LeerPeriodo;
    private javax.swing.JLabel MarcaDeAgua;
    private javax.swing.JLabel RespuestaCancelados;
    private javax.swing.JLabel RespuestaCantidadProd1;
    private javax.swing.JLabel RespuestaCantidadServ1;
    private javax.swing.JLabel RespuestaConfirmados;
    private javax.swing.JLabel RespuestaGBarbero;
    private javax.swing.JLabel RespuestaInsumos;
    private javax.swing.JLabel RespuestaTicketPromedio;
    private javax.swing.JLabel RespuestaTotalProd1;
    private javax.swing.JLabel RespuestaTotalServ1;
    private javax.swing.JLabel RespuestaTotales;
    private javax.swing.JScrollPane ScrollVentasProd;
    private javax.swing.JScrollPane ScrollVentasServ;
    private javax.swing.JTable TablaVentasProd;
    private javax.swing.JTable TablaVentasServ;
    private javax.swing.JLabel TextoCancelados;
    private javax.swing.JLabel TextoCantidadProd;
    private javax.swing.JLabel TextoCantidadServ;
    private javax.swing.JLabel TextoCitas;
    private javax.swing.JLabel TextoConfirmados;
    private javax.swing.JLabel TextoFecha;
    private javax.swing.JLabel TextoGBarbero;
    private javax.swing.JLabel TextoInsumos;
    private javax.swing.JLabel TextoPeriodo;
    private javax.swing.JLabel TextoTicketPromedio;
    private javax.swing.JLabel TextoTotalProd;
    private javax.swing.JLabel TextoTotalServ;
    private javax.swing.JLabel TextoTotales;
    private javax.swing.JLabel TextoVentas2;
    private javax.swing.JLabel TextoVentasProductos;
    private javax.swing.JLabel TextoVentasServicios;
    private javax.swing.JLabel Titulo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
