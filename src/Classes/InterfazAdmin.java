package Classes;

import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class InterfazAdmin extends javax.swing.JFrame {
    //Realiza la conexi√≥n a la BD
    Conexion conexion;   
    
    //Para poder mover la ventana
    private Point point;
    
    ArrayList nListaBarberos = new ArrayList();
    
    public InterfazAdmin() {
        conexion = new Conexion("barraganthebarbers");
        initComponents();
        this.setLocationRelativeTo(null);
        setIconImage(getIconImage());
        LlenarBarberos();
        restringeNumeros(LeerServPrecio);
        restringeNumeros(LeerProdPrecio);
        
        TextoVentas.setVisible(false);
        ScrollVentasServ.setVisible(false);
        ScrollVentasProd.setVisible(false);
        TextoVentasServicios.setVisible(false);
        TextoVentasProductos.setVisible(false);
        TextoServicios.setVisible(false);
        TextoOpciones.setVisible(false);
        ScrollServicios.setVisible(false);
        BotonServAgregar.setVisible(false);
        BotonServActualizar.setVisible(false);
        BotonServEliminar.setVisible(false);
        BotonServLimpiar.setVisible(false);
        BotonServModificar.setVisible(false);
        LeerServicio.setVisible(false);
        LeerServPrecio.setVisible(false);
        TextoCRUDDuracion.setVisible(false);
        ElegirServDuracion.setVisible(false);
        TextoCRUDServicio.setVisible(false);
        TextoCRUDServPrecio.setVisible(false);
        RespuestaServId.setVisible(false);
        TextoCRUDServId.setVisible(false);        
        TextoProductos.setVisible(false);
        
        TextoProductos.setVisible(false);
        TextoCRUDProducto.setVisible(false);
        LeerProducto.setVisible(false);
        TextoCRUDProdPrecio.setVisible(false);
        LeerProdPrecio.setVisible(false);
        TextoCRUDProdId.setVisible(false);
        RespuestaProdId.setVisible(false);
        BotonProdModificar.setVisible(false);
        BotonProdLimpiar.setVisible(false);
        BotonProdAgregar.setVisible(false);
        BotonProdActualizar.setVisible(false);
        BotonProdEliminar.setVisible(false);
        ScrollProductos.setVisible(false);
        
        ScrollProductos.setVisible(false);
        TextoBarberos.setVisible(false);
        ScrollBarberos.setVisible(false);
        TextoPeriodo.setVisible(false);
        LeerPeriodo.setVisible(false);
        TextoVentasBarbero.setVisible(false);
        SeleccionarVentasBarbero.setVisible(false);
        BotonOjo.setVisible(false);
        TextoTotalServ.setVisible(false);
        RespuestaTotalServ1.setVisible(false);
        TextoTotalProd.setVisible(false);
        RespuestaTotalProd1.setVisible(false);
        TextoCantidadServ.setVisible(false);
        RespuestaCantidadServ1.setVisible(false);
        TextoCantidadProd.setVisible(false);
        RespuestaCantidadProd1.setVisible(false);
        TextoFecha.setVisible(false);
        ElegirFecha.setVisible(false);
        BotonConfirmarServ.setVisible(false);
        BotonConfirmarProd.setVisible(false);
        TextoGBarberia.setVisible(false);
        TextoGBarbero.setVisible(false);
        RespuestaGBarberia.setVisible(false);
        RespuestaGBarbero.setVisible(false);
        TextoInsumos.setVisible(false);
        RespuestaInsumos.setVisible(false);
        TextoTicketPromedio.setVisible(false);
        RespuestaTicketPromedio.setVisible(false);
        TextoCancelados.setVisible(false);
        RespuestaCancelados.setVisible(false);
        TextoConfirmados.setVisible(false);
        RespuestaConfirmados.setVisible(false);
        TextoTotales.setVisible(false);
        RespuestaTotales.setVisible(false);
        TextoCitas.setVisible(false);
        TextoVentas2.setVisible(false);
    }

    @Override
    public Image getIconImage(){
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("Imagenes/Icono1.png")); //Carga miniatura
        return retValue;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        TextoTitulo = new javax.swing.JLabel();
        MarcaDeAgua = new javax.swing.JLabel();
        TextoOpciones = new javax.swing.JLabel();
        BotonInicio = new javax.swing.JButton();
        BotonVentas = new javax.swing.JButton();
        TextoVentas = new javax.swing.JLabel();
        TextoVentasServicios = new javax.swing.JLabel();
        TextoVentasProductos = new javax.swing.JLabel();
        TextoPeriodo = new javax.swing.JLabel();
        LeerPeriodo = new javax.swing.JComboBox<>();
        TextoVentasBarbero = new javax.swing.JLabel();
        SeleccionarVentasBarbero = new javax.swing.JComboBox<>();
        TextoFecha = new javax.swing.JLabel();
        ScrollVentasServ = new javax.swing.JScrollPane();
        TablaVentasServ = new javax.swing.JTable();
        BotonConfirmarServ = new javax.swing.JButton();
        ScrollVentasProd = new javax.swing.JScrollPane();
        TablaVentasProd = new javax.swing.JTable();
        BotonConfirmarProd = new javax.swing.JButton();
        TextoTotalServ = new javax.swing.JLabel();
        RespuestaTotalServ1 = new javax.swing.JLabel();
        TextoCantidadServ = new javax.swing.JLabel();
        RespuestaCantidadServ1 = new javax.swing.JLabel();
        TextoTotalProd = new javax.swing.JLabel();
        RespuestaTotalProd1 = new javax.swing.JLabel();
        TextoCantidadProd = new javax.swing.JLabel();
        RespuestaCantidadProd1 = new javax.swing.JLabel();
        BotonServicios = new javax.swing.JButton();
        TextoServicios = new javax.swing.JLabel();
        TextoCRUDServicio = new javax.swing.JLabel();
        LeerServicio = new javax.swing.JTextField();
        TextoCRUDServPrecio = new javax.swing.JLabel();
        LeerServPrecio = new javax.swing.JTextField();
        TextoCRUDDuracion = new javax.swing.JLabel();
        ElegirServDuracion = new javax.swing.JComboBox<>();
        TextoCRUDServId = new javax.swing.JLabel();
        RespuestaServId = new javax.swing.JTextField();
        ScrollServicios = new javax.swing.JScrollPane();
        TablaServicios = new javax.swing.JTable();
        BotonServModificar = new javax.swing.JButton();
        BotonServLimpiar = new javax.swing.JButton();
        BotonServAgregar = new javax.swing.JButton();
        BotonServActualizar = new javax.swing.JButton();
        BotonServEliminar = new javax.swing.JButton();
        BotonProductos = new javax.swing.JButton();
        TextoProductos = new javax.swing.JLabel();
        TextoCRUDProducto = new javax.swing.JLabel();
        LeerProducto = new javax.swing.JTextField();
        TextoCRUDProdPrecio = new javax.swing.JLabel();
        LeerProdPrecio = new javax.swing.JTextField();
        TextoCRUDProdId = new javax.swing.JLabel();
        RespuestaProdId = new javax.swing.JTextField();
        BotonProdModificar = new javax.swing.JButton();
        BotonProdLimpiar = new javax.swing.JButton();
        BotonProdAgregar = new javax.swing.JButton();
        BotonProdActualizar = new javax.swing.JButton();
        BotonProdEliminar = new javax.swing.JButton();
        ScrollProductos = new javax.swing.JScrollPane();
        TablaProductos = new javax.swing.JTable();
        BotonBarberos = new javax.swing.JButton();
        TextoBarberos = new javax.swing.JLabel();
        ScrollBarberos = new javax.swing.JScrollPane();
        TablaBarberos = new javax.swing.JTable();
        TextoGBarberia = new javax.swing.JLabel();
        TextoGBarbero = new javax.swing.JLabel();
        RespuestaGBarberia = new javax.swing.JLabel();
        RespuestaGBarbero = new javax.swing.JLabel();
        TextoInsumos = new javax.swing.JLabel();
        RespuestaInsumos = new javax.swing.JLabel();
        TextoTicketPromedio = new javax.swing.JLabel();
        RespuestaTicketPromedio = new javax.swing.JLabel();
        TextoCancelados = new javax.swing.JLabel();
        TextoConfirmados = new javax.swing.JLabel();
        RespuestaCancelados = new javax.swing.JLabel();
        RespuestaConfirmados = new javax.swing.JLabel();
        TextoTotales = new javax.swing.JLabel();
        RespuestaTotales = new javax.swing.JLabel();
        TextoCitas = new javax.swing.JLabel();
        TextoVentas2 = new javax.swing.JLabel();
        BotonOjo = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        ElegirFecha = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        BotonMinimizar = new javax.swing.JButton();
        BotonPerfil = new javax.swing.JButton();
        BotonSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(52, 73, 94));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TextoTitulo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        TextoTitulo.setForeground(new java.awt.Color(255, 255, 255));
        TextoTitulo.setText("Administrador");
        jPanel1.add(TextoTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 120, 30));

        MarcaDeAgua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Icono1_2.png"))); // NOI18N
        jPanel1.add(MarcaDeAgua, new org.netbeans.lib.awtextra.AbsoluteConstraints(1410, 770, 40, 40));

        TextoOpciones.setFont(new java.awt.Font("Times New Roman", 1, 38)); // NOI18N
        TextoOpciones.setForeground(new java.awt.Color(255, 255, 255));
        TextoOpciones.setText("Opciones");
        jPanel1.add(TextoOpciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 140, 170, 50));

        BotonInicio.setBackground(new java.awt.Color(95, 106, 106));
        BotonInicio.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BotonInicio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Regresar Inicio.png"))); // NOI18N
        BotonInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonInicioActionPerformed(evt);
            }
        });
        jPanel1.add(BotonInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 80, 40));

        BotonVentas.setBackground(new java.awt.Color(154, 125, 10));
        BotonVentas.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        BotonVentas.setForeground(new java.awt.Color(255, 255, 255));
        BotonVentas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Ventas2.png"))); // NOI18N
        BotonVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonVentasMouseClicked(evt);
            }
        });
        BotonVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonVentasActionPerformed(evt);
            }
        });
        jPanel1.add(BotonVentas, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 150, 80));

        TextoVentas.setFont(new java.awt.Font("Times New Roman", 1, 38)); // NOI18N
        TextoVentas.setForeground(new java.awt.Color(255, 255, 255));
        TextoVentas.setText("Ventas");
        jPanel1.add(TextoVentas, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 80, 130, 50));

        TextoVentasServicios.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        TextoVentasServicios.setForeground(new java.awt.Color(255, 255, 255));
        TextoVentasServicios.setText("Servicios");
        jPanel1.add(TextoVentasServicios, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 130, 110, -1));

        TextoVentasProductos.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        TextoVentasProductos.setForeground(new java.awt.Color(255, 255, 255));
        TextoVentasProductos.setText("Productos");
        jPanel1.add(TextoVentasProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 130, -1, -1));

        TextoPeriodo.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        TextoPeriodo.setText("Periodo");
        jPanel1.add(TextoPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 120, 100, 40));

        LeerPeriodo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        LeerPeriodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "Dia", "Semanal", "Mensual", "Anual", "Siempre" }));
        LeerPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeerPeriodoActionPerformed(evt);
            }
        });
        jPanel1.add(LeerPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 160, 130, 40));

        TextoVentasBarbero.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        TextoVentasBarbero.setText("Barbero");
        jPanel1.add(TextoVentasBarbero, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 120, 100, 40));

        SeleccionarVentasBarbero.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        SeleccionarVentasBarbero.setMaximumRowCount(100);
        SeleccionarVentasBarbero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionarVentasBarberoActionPerformed(evt);
            }
        });
        jPanel1.add(SeleccionarVentasBarbero, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 160, 140, 40));

        TextoFecha.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        TextoFecha.setText("Fecha");
        jPanel1.add(TextoFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 120, 70, 40));

        TablaVentasServ.setBackground(new java.awt.Color(154, 125, 10));
        TablaVentasServ.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        TablaVentasServ.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        TablaVentasServ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TablaVentasServ.setToolTipText("");
        ScrollVentasServ.setViewportView(TablaVentasServ);

        jPanel1.add(ScrollVentasServ, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 830, 420));

        BotonConfirmarServ.setBackground(new java.awt.Color(202, 111, 30));
        BotonConfirmarServ.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        BotonConfirmarServ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Palomita.png"))); // NOI18N
        BotonConfirmarServ.setText("Servicios");
        BotonConfirmarServ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonConfirmarServActionPerformed(evt);
            }
        });
        jPanel1.add(BotonConfirmarServ, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 210, 130, 40));

        TablaVentasProd.setBackground(new java.awt.Color(154, 125, 10));
        TablaVentasProd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        TablaVentasProd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ScrollVentasProd.setViewportView(TablaVentasProd);

        jPanel1.add(ScrollVentasProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 830, 420));

        BotonConfirmarProd.setBackground(new java.awt.Color(202, 111, 30));
        BotonConfirmarProd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        BotonConfirmarProd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Palomita.png"))); // NOI18N
        BotonConfirmarProd.setText("Productos");
        BotonConfirmarProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonConfirmarProdActionPerformed(evt);
            }
        });
        jPanel1.add(BotonConfirmarProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 210, 140, 40));

        TextoTotalServ.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoTotalServ.setText("Total:");
        jPanel1.add(TextoTotalServ, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 580, 60, 40));

        RespuestaTotalServ1.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        RespuestaTotalServ1.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaTotalServ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 580, 170, 40));

        TextoCantidadServ.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoCantidadServ.setText("  Cantidad:");
        TextoCantidadServ.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(TextoCantidadServ, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 580, 110, 40));

        RespuestaCantidadServ1.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        RespuestaCantidadServ1.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaCantidadServ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 580, 110, 40));

        TextoTotalProd.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoTotalProd.setText("Total:");
        jPanel1.add(TextoTotalProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 580, 60, 40));

        RespuestaTotalProd1.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        RespuestaTotalProd1.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaTotalProd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 580, 170, 40));

        TextoCantidadProd.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoCantidadProd.setText("Cantidad:");
        jPanel1.add(TextoCantidadProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 580, 100, 40));

        RespuestaCantidadProd1.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        RespuestaCantidadProd1.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaCantidadProd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 580, 110, 40));

        BotonServicios.setBackground(new java.awt.Color(154, 125, 10));
        BotonServicios.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        BotonServicios.setForeground(new java.awt.Color(255, 255, 255));
        BotonServicios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Tijeras2.png"))); // NOI18N
        BotonServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonServiciosActionPerformed(evt);
            }
        });
        jPanel1.add(BotonServicios, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 0, 150, 80));

        TextoServicios.setFont(new java.awt.Font("Times New Roman", 1, 38)); // NOI18N
        TextoServicios.setForeground(new java.awt.Color(255, 255, 255));
        TextoServicios.setText("Servicios");
        jPanel1.add(TextoServicios, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 110, -1, 50));

        TextoCRUDServicio.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TextoCRUDServicio.setText("Servicio:");
        jPanel1.add(TextoCRUDServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 230, 100, 40));

        LeerServicio.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        LeerServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeerServicioActionPerformed(evt);
            }
        });
        jPanel1.add(LeerServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 230, 210, 40));

        TextoCRUDServPrecio.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TextoCRUDServPrecio.setText("Precio:");
        jPanel1.add(TextoCRUDServPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 280, 80, 40));

        LeerServPrecio.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        LeerServPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeerServPrecioActionPerformed(evt);
            }
        });
        jPanel1.add(LeerServPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 280, 90, 40));

        TextoCRUDDuracion.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TextoCRUDDuracion.setText("Duracion:");
        jPanel1.add(TextoCRUDDuracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 330, -1, 40));

        ElegirServDuracion.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        ElegirServDuracion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "30 min", "60 min", "90 min", "120 min" }));
        jPanel1.add(ElegirServDuracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 330, 90, 40));

        TextoCRUDServId.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TextoCRUDServId.setText("Id:");
        jPanel1.add(TextoCRUDServId, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 280, 40, 40));

        RespuestaServId.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        RespuestaServId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RespuestaServIdActionPerformed(evt);
            }
        });
        jPanel1.add(RespuestaServId, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 280, 60, 40));

        TablaServicios.setBackground(new java.awt.Color(154, 125, 10));
        TablaServicios.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        TablaServicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ScrollServicios.setViewportView(TablaServicios);

        jPanel1.add(ScrollServicios, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 820, 420));

        BotonServModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Modify.png"))); // NOI18N
        BotonServModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonServModificarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonServModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 160, 50, 420));

        BotonServLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Clean 2.png"))); // NOI18N
        BotonServLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonServLimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonServLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 330, 60, 40));

        BotonServAgregar.setBackground(new java.awt.Color(202, 111, 30));
        BotonServAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Plus 4.png"))); // NOI18N
        BotonServAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonServAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonServAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 410, 100, 40));

        BotonServActualizar.setBackground(new java.awt.Color(36, 113, 163));
        BotonServActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Update.png"))); // NOI18N
        BotonServActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonServActualizarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonServActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 410, 100, 40));

        BotonServEliminar.setBackground(new java.awt.Color(169, 50, 38));
        BotonServEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Remove 5.png"))); // NOI18N
        BotonServEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonServEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonServEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 410, 100, 40));

        BotonProductos.setBackground(new java.awt.Color(154, 125, 10));
        BotonProductos.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        BotonProductos.setForeground(new java.awt.Color(255, 255, 255));
        BotonProductos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Producto2.png"))); // NOI18N
        BotonProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonProductosActionPerformed(evt);
            }
        });
        jPanel1.add(BotonProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 0, 150, 80));

        TextoProductos.setFont(new java.awt.Font("Times New Roman", 1, 38)); // NOI18N
        TextoProductos.setForeground(new java.awt.Color(255, 255, 255));
        TextoProductos.setText("Productos");
        jPanel1.add(TextoProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, 180, 50));

        TextoCRUDProducto.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TextoCRUDProducto.setText("Producto:");
        jPanel1.add(TextoCRUDProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 230, 110, 40));

        LeerProducto.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        LeerProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeerProductoActionPerformed(evt);
            }
        });
        jPanel1.add(LeerProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 230, 210, 40));

        TextoCRUDProdPrecio.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TextoCRUDProdPrecio.setText("Precio:");
        jPanel1.add(TextoCRUDProdPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 280, -1, 40));

        LeerProdPrecio.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jPanel1.add(LeerProdPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 280, 90, 40));

        TextoCRUDProdId.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TextoCRUDProdId.setText("Id:");
        jPanel1.add(TextoCRUDProdId, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 280, 40, 40));

        RespuestaProdId.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jPanel1.add(RespuestaProdId, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 280, 60, 40));

        BotonProdModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Modify.png"))); // NOI18N
        BotonProdModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonProdModificarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonProdModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 160, 50, 420));

        BotonProdLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Clean 2.png"))); // NOI18N
        BotonProdLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonProdLimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonProdLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 330, 60, 40));

        BotonProdAgregar.setBackground(new java.awt.Color(202, 111, 30));
        BotonProdAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Plus 4.png"))); // NOI18N
        BotonProdAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonProdAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonProdAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 410, 100, 40));

        BotonProdActualizar.setBackground(new java.awt.Color(36, 113, 163));
        BotonProdActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Update.png"))); // NOI18N
        BotonProdActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonProdActualizarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonProdActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 410, 100, 40));

        BotonProdEliminar.setBackground(new java.awt.Color(169, 50, 38));
        BotonProdEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Remove 5.png"))); // NOI18N
        BotonProdEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonProdEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonProdEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 410, 100, 40));

        TablaProductos.setBackground(new java.awt.Color(154, 125, 10));
        TablaProductos.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        TablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ScrollProductos.setViewportView(TablaProductos);

        jPanel1.add(ScrollProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 820, 420));

        BotonBarberos.setBackground(new java.awt.Color(154, 125, 10));
        BotonBarberos.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        BotonBarberos.setForeground(new java.awt.Color(255, 255, 255));
        BotonBarberos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Barbero2 (2).png"))); // NOI18N
        BotonBarberos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBarberosActionPerformed(evt);
            }
        });
        jPanel1.add(BotonBarberos, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 0, 150, 80));

        TextoBarberos.setFont(new java.awt.Font("Times New Roman", 1, 38)); // NOI18N
        TextoBarberos.setForeground(new java.awt.Color(255, 255, 255));
        TextoBarberos.setText("Barberos");
        jPanel1.add(TextoBarberos, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 110, 170, 50));

        TablaBarberos.setBackground(new java.awt.Color(154, 125, 10));
        TablaBarberos.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        TablaBarberos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ScrollBarberos.setViewportView(TablaBarberos);

        jPanel1.add(ScrollBarberos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 1030, 360));

        TextoGBarberia.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoGBarberia.setText("Ganancia Barber:");
        jPanel1.add(TextoGBarberia, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 310, 180, 30));

        TextoGBarbero.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoGBarbero.setText("Ganancia Barbero:");
        jPanel1.add(TextoGBarbero, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 340, 190, 30));

        RespuestaGBarberia.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        RespuestaGBarberia.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaGBarberia, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 310, 180, 30));

        RespuestaGBarbero.setBackground(new java.awt.Color(255, 255, 255));
        RespuestaGBarbero.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        RespuestaGBarbero.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaGBarbero, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 340, 180, 30));

        TextoInsumos.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoInsumos.setText("Insumos:");
        jPanel1.add(TextoInsumos, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 370, 90, 30));

        RespuestaInsumos.setBackground(new java.awt.Color(255, 255, 255));
        RespuestaInsumos.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        RespuestaInsumos.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaInsumos, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 370, 180, 30));

        TextoTicketPromedio.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoTicketPromedio.setText("Ticket Promedio:");
        jPanel1.add(TextoTicketPromedio, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 400, 170, 30));

        RespuestaTicketPromedio.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        RespuestaTicketPromedio.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaTicketPromedio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 400, 180, 30));

        TextoCancelados.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoCancelados.setText("Canceladas:");
        jPanel1.add(TextoCancelados, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 530, 120, 30));

        TextoConfirmados.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoConfirmados.setText("Confirmadas:");
        jPanel1.add(TextoConfirmados, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 500, -1, 30));

        RespuestaCancelados.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        RespuestaCancelados.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaCancelados, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 530, 90, 30));

        RespuestaConfirmados.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        RespuestaConfirmados.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaConfirmados, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 500, 90, 30));

        TextoTotales.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        TextoTotales.setText("Totales:");
        jPanel1.add(TextoTotales, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 560, -1, 30));

        RespuestaTotales.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        RespuestaTotales.setForeground(new java.awt.Color(154, 125, 10));
        jPanel1.add(RespuestaTotales, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 560, 90, 30));

        TextoCitas.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        TextoCitas.setForeground(new java.awt.Color(154, 125, 10));
        TextoCitas.setText("CITAS");
        jPanel1.add(TextoCitas, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 460, 100, 40));

        TextoVentas2.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        TextoVentas2.setForeground(new java.awt.Color(154, 125, 10));
        TextoVentas2.setText("VENTAS");
        jPanel1.add(TextoVentas2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 270, 130, -1));

        BotonOjo.setBackground(new java.awt.Color(133, 146, 158));
        BotonOjo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Eye_1.png"))); // NOI18N
        BotonOjo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonOjoActionPerformed(evt);
            }
        });
        jPanel1.add(BotonOjo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 270, 30, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/LogoBarragan48px.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 610, -1, -1));
        jPanel1.add(ElegirFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 160, 140, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1340, 660));

        jPanel2.setBackground(new java.awt.Color(52, 73, 94));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BotonMinimizar.setBackground(new java.awt.Color(95, 106, 106));
        BotonMinimizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Minimize_1.png"))); // NOI18N
        BotonMinimizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonMinimizarActionPerformed(evt);
            }
        });
        jPanel2.add(BotonMinimizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 0, 90, 30));

        BotonPerfil.setBackground(new java.awt.Color(95, 106, 106));
        BotonPerfil.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BotonPerfil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Perfil.png"))); // NOI18N
        BotonPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonPerfilActionPerformed(evt);
            }
        });
        jPanel2.add(BotonPerfil, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        BotonSalir.setBackground(new java.awt.Color(203, 67, 53));
        BotonSalir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BotonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Exit.png"))); // NOI18N
        BotonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalirActionPerformed(evt);
            }
        });
        jPanel2.add(BotonSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 0, 90, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1340, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonBarberosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBarberosActionPerformed
        BotonVentas.setEnabled(true);           //Activar los otros botones
        BotonServicios.setEnabled(true);
        BotonProductos.setEnabled(true);
        
        BotonBarberos.setEnabled(false);
        TextoOpciones.setVisible(false);
        TextoBarberos.setVisible(true);
        ScrollBarberos.setVisible(true);
        ConsultarBarberos();
        
        
        TextoVentas.setVisible(false);      //Quitar titulos
        ScrollVentasServ.setVisible(false);       //Quitar Paneles
        ScrollVentasProd.setVisible(false);
        TextoVentasServicios.setVisible(false);
        TextoVentasProductos.setVisible(false);
        TextoServicios.setVisible(false);
        ScrollServicios.setVisible(false);
        BotonServAgregar.setVisible(false);
        BotonServActualizar.setVisible(false);
        BotonServEliminar.setVisible(false);
        BotonServLimpiar.setVisible(false);
        BotonServModificar.setVisible(false);
        LeerServicio.setVisible(false);
        LeerServPrecio.setVisible(false);
        TextoCRUDDuracion.setVisible(false);
        ElegirServDuracion.setVisible(false);
        TextoCRUDServicio.setVisible(false);
        TextoCRUDServPrecio.setVisible(false);
        RespuestaServId.setVisible(false);
        TextoCRUDServId.setVisible(false);
        TextoProductos.setVisible(false);
        TextoProductos.setVisible(false);
        TextoCRUDProducto.setVisible(false);
        LeerProducto.setVisible(false);
        TextoCRUDProdPrecio.setVisible(false);
        LeerProdPrecio.setVisible(false);
        TextoCRUDProdId.setVisible(false);
        RespuestaProdId.setVisible(false);
        BotonProdModificar.setVisible(false);
        BotonProdLimpiar.setVisible(false);
        BotonProdAgregar.setVisible(false);
        BotonProdActualizar.setVisible(false);
        BotonProdEliminar.setVisible(false);
        ScrollProductos.setVisible(false);
        ScrollProductos.setVisible(false);
        TextoPeriodo.setVisible(false);
        LeerPeriodo.setVisible(false);
        TextoVentasBarbero.setVisible(false);
        SeleccionarVentasBarbero.setVisible(false);
        BotonOjo.setVisible(false);
        TextoTotalServ.setVisible(false);
        RespuestaTotalServ1.setVisible(false);
        TextoTotalProd.setVisible(false);
        RespuestaTotalProd1.setVisible(false);
        TextoCantidadServ.setVisible(false);
        RespuestaCantidadServ1.setVisible(false);
        TextoCantidadProd.setVisible(false);
        RespuestaCantidadProd1.setVisible(false);
        TextoFecha.setVisible(false);
        ElegirFecha.setVisible(false);
        BotonConfirmarServ.setVisible(false);
        BotonConfirmarProd.setVisible(false);
        TextoGBarberia.setVisible(false);
        TextoGBarbero.setVisible(false);
        RespuestaGBarberia.setVisible(false);
        RespuestaGBarbero.setVisible(false);
        TextoInsumos.setVisible(false);
        RespuestaInsumos.setVisible(false);
        TextoTicketPromedio.setVisible(false);
        RespuestaTicketPromedio.setVisible(false);
        TextoCancelados.setVisible(false);
        RespuestaCancelados.setVisible(false);
        TextoConfirmados.setVisible(false);
        RespuestaConfirmados.setVisible(false);
        TextoTotales.setVisible(false);
        RespuestaTotales.setVisible(false);
        TextoCitas.setVisible(false);
        TextoVentas2.setVisible(false);
    }//GEN-LAST:event_BotonBarberosActionPerformed

    private void BotonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSalirActionPerformed
        conexion.Desconectar();
        System.exit(0);
    }//GEN-LAST:event_BotonSalirActionPerformed

    private void BotonInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonInicioActionPerformed
        conexion.Desconectar();
        Interfaz vI = new Interfaz();
        vI.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_BotonInicioActionPerformed

    private void BotonPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonPerfilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BotonPerfilActionPerformed

    private void BotonVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonVentasActionPerformed
        BotonServicios.setEnabled(true);         //Activar los otros botones
        BotonProductos.setEnabled(true);
        BotonBarberos.setEnabled(true);
        
        BotonVentas.setEnabled(false);
        TextoVentas.setVisible(true);

        TextoPeriodo.setVisible(true);
        LeerPeriodo.setVisible(true);
        TextoVentasBarbero.setVisible(true);
        SeleccionarVentasBarbero.setVisible(true);
        TextoFecha.setVisible(true);
        ElegirFecha.setVisible(true);
        BotonConfirmarServ.setVisible(true);
        BotonConfirmarProd.setVisible(true);
        
        TextoOpciones.setVisible(false);
        TextoServicios.setVisible(false);       //Quitar titulos
        ScrollServicios.setVisible(false);       //Quitar Paneles
        BotonServAgregar.setVisible(false);
        BotonServActualizar.setVisible(false);
        BotonServEliminar.setVisible(false);
        BotonServLimpiar.setVisible(false);
        BotonServModificar.setVisible(false);
        LeerServicio.setVisible(false);
        LeerServPrecio.setVisible(false);
        TextoCRUDDuracion.setVisible(false);
        ElegirServDuracion.setVisible(false);
        TextoCRUDServicio.setVisible(false);
        TextoCRUDServPrecio.setVisible(false);
        RespuestaServId.setVisible(false);
        TextoCRUDServId.setVisible(false);
        TextoProductos.setVisible(false);
        TextoProductos.setVisible(false);
        TextoCRUDProducto.setVisible(false);
        LeerProducto.setVisible(false);
        TextoCRUDProdPrecio.setVisible(false);
        LeerProdPrecio.setVisible(false);
        TextoCRUDProdId.setVisible(false);
        RespuestaProdId.setVisible(false);
        BotonProdModificar.setVisible(false);
        BotonProdLimpiar.setVisible(false);
        BotonProdAgregar.setVisible(false);
        BotonProdActualizar.setVisible(false);
        BotonProdEliminar.setVisible(false);
        ScrollProductos.setVisible(false);
        ScrollProductos.setVisible(false);
        TextoBarberos.setVisible(false);
        ScrollBarberos.setVisible(false);
    }//GEN-LAST:event_BotonVentasActionPerformed

    private void BotonServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonServiciosActionPerformed
        BotonVentas.setEnabled(true);       //Activar los otros botones
        BotonProductos.setEnabled(true);
        BotonBarberos.setEnabled(true);
        
        BotonServicios.setEnabled(false);
        TextoOpciones.setVisible(true);
        TextoServicios.setVisible(true);
        ScrollServicios.setVisible(true);        
        TablaServicios.setVisible(true);
        BotonServAgregar.setVisible(true);
        BotonServActualizar.setVisible(true);
        BotonServEliminar.setVisible(true);
        BotonServLimpiar.setVisible(true);
        BotonServModificar.setVisible(true);
        LeerServicio.setVisible(true);
        LeerServPrecio.setVisible(true);
        TextoCRUDDuracion.setVisible(true);
        ElegirServDuracion.setVisible(true);
        TextoCRUDServicio.setVisible(true);
        TextoCRUDServPrecio.setVisible(true);
        RespuestaServId.setVisible(true);
        RespuestaServId.setEnabled(false);
        TextoCRUDServId.setVisible(true);
        //LimpiarServField();
        ConsultarServicios();
        
        TextoVentas.setVisible(false);      //Quitar titulos
        ScrollVentasServ.setVisible(false);       //Quitar Paneles
        ScrollVentasProd.setVisible(false);
        TextoVentasServicios.setVisible(false);
        TextoVentasProductos.setVisible(false);
        TextoBarberos.setVisible(false);
        ScrollBarberos.setVisible(false);
        TextoProductos.setVisible(false);
        TextoProductos.setVisible(false);
        TextoCRUDProducto.setVisible(false);
        LeerProducto.setVisible(false);
        TextoCRUDProdPrecio.setVisible(false);
        LeerProdPrecio.setVisible(false);
        TextoCRUDProdId.setVisible(false);
        RespuestaProdId.setVisible(false);
        BotonProdModificar.setVisible(false);
        BotonProdLimpiar.setVisible(false);
        BotonProdAgregar.setVisible(false);
        BotonProdActualizar.setVisible(false);
        BotonProdEliminar.setVisible(false);
        ScrollProductos.setVisible(false);
        ScrollProductos.setVisible(false);
        TextoPeriodo.setVisible(false);
        LeerPeriodo.setVisible(false);
        TextoVentasBarbero.setVisible(false);
        SeleccionarVentasBarbero.setVisible(false);
        BotonOjo.setVisible(false);
        TextoTotalServ.setVisible(false);
        RespuestaTotalServ1.setVisible(false);
        TextoTotalProd.setVisible(false);
        RespuestaTotalProd1.setVisible(false);
        TextoCantidadServ.setVisible(false);
        RespuestaCantidadServ1.setVisible(false);
        TextoCantidadProd.setVisible(false);
        RespuestaCantidadProd1.setVisible(false);
        TextoFecha.setVisible(false);
        ElegirFecha.setVisible(false);
        BotonConfirmarServ.setVisible(false);
        BotonConfirmarProd.setVisible(false);
        TextoGBarberia.setVisible(false);
        TextoGBarbero.setVisible(false);
        RespuestaGBarberia.setVisible(false);
        RespuestaGBarbero.setVisible(false);
        TextoInsumos.setVisible(false);
        RespuestaInsumos.setVisible(false);
        TextoTicketPromedio.setVisible(false);
        RespuestaTicketPromedio.setVisible(false);
        TextoCancelados.setVisible(false);
        RespuestaCancelados.setVisible(false);
        TextoConfirmados.setVisible(false);
        RespuestaConfirmados.setVisible(false);
        TextoTotales.setVisible(false);
        RespuestaTotales.setVisible(false);
        TextoCitas.setVisible(false);
        TextoVentas2.setVisible(false);
    }//GEN-LAST:event_BotonServiciosActionPerformed

    private void BotonProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonProductosActionPerformed
        BotonVentas.setEnabled(true);       //Activar los otros botones
        BotonServicios.setEnabled(true);
        BotonBarberos.setEnabled(true);
        
        BotonProductos.setEnabled(false);
        TextoOpciones.setVisible(true);
        TextoProductos.setVisible(true);
        TextoProductos.setVisible(true);
        TextoCRUDProducto.setVisible(true);
        LeerProducto.setVisible(true);
        TextoCRUDProdPrecio.setVisible(true);
        LeerProdPrecio.setVisible(true);
        TextoCRUDProdId.setVisible(true);
        RespuestaProdId.setVisible(true);
        RespuestaProdId.setEnabled(false);
        BotonProdModificar.setVisible(true);
        BotonProdLimpiar.setVisible(true);
        BotonProdAgregar.setVisible(true);
        BotonProdActualizar.setVisible(true);
        BotonProdEliminar.setVisible(true);
        ScrollProductos.setVisible(true);
        ScrollProductos.setVisible(true);
        ConsultarProductos();
        
        TextoVentas.setVisible(false);      //Quitar titulos
        ScrollVentasServ.setVisible(false);       //Quitar 
        ScrollVentasProd.setVisible(false);
        TextoVentasServicios.setVisible(false);
        TextoVentasProductos.setVisible(false);
        TextoServicios.setVisible(false);
        ScrollServicios.setVisible(false);
        BotonServAgregar.setVisible(false);
        BotonServActualizar.setVisible(false);
        BotonServEliminar.setVisible(false);
        BotonServLimpiar.setVisible(false);
        BotonServModificar.setVisible(false);
        LeerServicio.setVisible(false);
        LeerServPrecio.setVisible(false);
        TextoCRUDDuracion.setVisible(false);
        ElegirServDuracion.setVisible(false);
        TextoCRUDServicio.setVisible(false);
        TextoCRUDServPrecio.setVisible(false);
        RespuestaServId.setVisible(false);
        TextoCRUDServId.setVisible(false);
        TextoBarberos.setVisible(false);
        ScrollBarberos.setVisible(false);
        TextoPeriodo.setVisible(false);
        LeerPeriodo.setVisible(false);
        TextoVentasBarbero.setVisible(false);
        SeleccionarVentasBarbero.setVisible(false);
        BotonOjo.setVisible(false);
        TextoTotalServ.setVisible(false);
        RespuestaTotalServ1.setVisible(false);
        TextoTotalProd.setVisible(false);
        RespuestaTotalProd1.setVisible(false);
        TextoCantidadServ.setVisible(false);
        RespuestaCantidadServ1.setVisible(false);
        TextoCantidadProd.setVisible(false);
        RespuestaCantidadProd1.setVisible(false);
        TextoFecha.setVisible(false);
        ElegirFecha.setVisible(false);
        BotonConfirmarServ.setVisible(false);
        BotonConfirmarProd.setVisible(false);
        TextoGBarberia.setVisible(false);
        TextoGBarbero.setVisible(false);
        RespuestaGBarberia.setVisible(false);
        RespuestaGBarbero.setVisible(false);
        TextoInsumos.setVisible(false);
        RespuestaInsumos.setVisible(false);
        TextoTicketPromedio.setVisible(false);
        RespuestaTicketPromedio.setVisible(false);
        TextoCancelados.setVisible(false);
        RespuestaCancelados.setVisible(false);
        TextoConfirmados.setVisible(false);
        RespuestaConfirmados.setVisible(false);
        TextoTotales.setVisible(false);
        RespuestaTotales.setVisible(false);
        TextoCitas.setVisible(false);
        TextoVentas2.setVisible(false);
    }//GEN-LAST:event_BotonProductosActionPerformed

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
        point = evt.getPoint();
        getComponentAt(point);
    }//GEN-LAST:event_jPanel2MousePressed

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        int CurrentX = this.getLocation().x;
        int CurrentY = this.getLocation().y;
        
        int MoveX = (CurrentX + evt.getX()) - (CurrentX + point.x);
        int MoveY = (CurrentY + evt.getY()) - (CurrentY + point.y);
        
        int x = CurrentX + MoveX;
        int y = CurrentY + MoveY;
        
        this.setLocation(x,y);
    }//GEN-LAST:event_jPanel2MouseDragged

    private void BotonMinimizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonMinimizarActionPerformed
        this.setExtendedState(ICONIFIED);
    }//GEN-LAST:event_BotonMinimizarActionPerformed

    private void BotonVentasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonVentasMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_BotonVentasMouseClicked

    private void LeerPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeerPeriodoActionPerformed
    //
    }//GEN-LAST:event_LeerPeriodoActionPerformed

    private void BotonConfirmarServActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonConfirmarServActionPerformed
        //BotonConfirmarServ.setEnabled(false);
        //BotonConfirmarProd.setEnabled(true);
                
        BotonOjo.setVisible(false);
        TextoTotalServ.setVisible(false);
        RespuestaTotalServ1.setVisible(false);
        TextoTotalProd.setVisible(false);
        RespuestaTotalProd1.setVisible(false);
        TextoCantidadServ.setVisible(false);
        RespuestaCantidadServ1.setVisible(false);
        TextoCantidadProd.setVisible(false);
        RespuestaCantidadProd1.setVisible(false);
        TextoGBarberia.setVisible(false);
        TextoGBarbero.setVisible(false);
        RespuestaGBarberia.setVisible(false);
        RespuestaGBarbero.setVisible(false);
        TextoInsumos.setVisible(false);
        RespuestaInsumos.setVisible(false);
        TextoTicketPromedio.setVisible(false);
        RespuestaTicketPromedio.setVisible(false);
        TextoCancelados.setVisible(false);
        RespuestaCancelados.setVisible(false);
        TextoConfirmados.setVisible(false);
        RespuestaConfirmados.setVisible(false);
        TextoTotales.setVisible(false);
        RespuestaTotales.setVisible(false);
        TextoCitas.setVisible(false);
        TextoVentas2.setVisible(false);
        ScrollVentasServ.setVisible(false);
        ScrollVentasProd.setVisible(false);
        TextoVentasServicios.setVisible(false);
        TextoVentasProductos.setVisible(false);
        if(LeerPeriodo.getSelectedItem().toString().compareTo("...")==0  || ElegirFecha.getDate() == null)
            JOptionPane.showMessageDialog(null,"Seleccione Todos los campos.");
        else{           
            //Fecha De Hoy
            Date fechaActual = new Date();
            String f;
            SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
            f = formatoFecha.format(fechaActual);   //Contiene la fecha de hoy
            //System.out.println("Fecha de Hoy:"+f);
                
            //Fecha Seleccionada
            Date fechaSeleccionada = ElegirFecha.getDate();
            String f2;
            SimpleDateFormat formatoFecha2 = new SimpleDateFormat("yyyy-MM-dd");
            f2 = formatoFecha2.format(fechaSeleccionada);   //Contiene la fecha Seleccionada
            //System.out.println("Fecha Seleccionada:"+f2);
            if(f2.compareTo(f) > 0)
                JOptionPane.showMessageDialog(null,"No existen registros para dias siguientes a hoy.");
            else{
                Barberos barbero = (Barberos) SeleccionarVentasBarbero.getSelectedItem();
                int idBarbero = barbero.getId();
                String sqlVS;
                String sqlVST;
                String sqlCACanceladas;
                String sqlCAConfirmadas;
                String sqlCATotales;
                String p = LeerPeriodo.getSelectedItem().toString();
                String b = SeleccionarVentasBarbero.getSelectedItem().toString();
                boolean banderita=false;
                switch (p) {
                    case "Dia" -> {
                        if(b.compareTo("...") ==0){
                            sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND agenda.fecha = '"+f2+"'";
                            sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND agenda.fecha = '"+f2+"'";
                            sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.fecha = '"+f2+"'";
                            ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                            
                            sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, barberos.nombre_usuario AS Barbero, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                       + "FROM barberos, servicios, ventasservicios "
                                       + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"' "
                                       + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                            if(banderita == true){
                                sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                           + "FROM barberos, ventasservicios "
                                           + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"'";
                                ConsultarVentasTotalS(sqlVST);
                            }
                        }else{
                            sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND agenda.fecha = '"+f2+"' AND agenda.id_barbero = "+idBarbero+" ";
                            sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND agenda.fecha = '"+f2+"' AND agenda.id_barbero = "+idBarbero+" ";
                            sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.fecha = '"+f2+"' AND agenda.id_barbero = "+idBarbero+" ";
                            ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                            
                            sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, barberos.nombre_usuario AS Barbero, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                       + "FROM barberos, servicios, ventasservicios "
                                       + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"' AND barberos.id_barbero = "+idBarbero+" "
                                       + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                            if(banderita == true){
                                sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                           + "FROM barberos, ventasservicios "
                                           + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"' AND barberos.id_barbero = "+idBarbero+" ";
                                ConsultarVentasTotalS(sqlVST);
                            }
                        }
                    }
                    case "Semanal" -> {
                        if(b.compareTo("...") ==0){
                            sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND WEEKOFYEAR(agenda.fecha) = WEEKOFYEAR('"+f2+"') ";
                            sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND WEEKOFYEAR(agenda.fecha) = WEEKOFYEAR('"+f2+"') ";
                            sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE WEEKOFYEAR(agenda.fecha) = WEEKOFYEAR('"+f2+"') ";
                            ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                            
                            sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, barberos.nombre_usuario AS Barbero, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                    + "FROM barberos, servicios, ventasservicios "
                                    + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"')"
                                    + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                            if(banderita == true){
                                sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                        + "FROM barberos, ventasservicios "
                                        + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') ";
                                ConsultarVentasTotalS(sqlVST);
                            }
                        }else{
                            sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND WEEKOFYEAR(agenda.fecha) = WEEKOFYEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                            sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND WEEKOFYEAR(agenda.fecha) = WEEKOFYEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                            sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE WEEKOFYEAR(agenda.fecha) = WEEKOFYEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                            ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                            
                            sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, barberos.nombre_usuario AS Barbero, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                    + "FROM barberos, servicios, ventasservicios "
                                    + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                    + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                            if(banderita == true){
                                sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                        + "FROM barberos, ventasservicios "
                                        + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                                ConsultarVentasTotalS(sqlVST);
                            }
                        }
                    }
                    case "Mensual" -> {
                        if(b.compareTo("...") ==0){
                            sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND MONTH(agenda.fecha) = MONTH('"+f2+"') ";
                            sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND MONTH(agenda.fecha) = MONTH('"+f2+"') ";
                            sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE MONTH(agenda.fecha) = MONTH('"+f2+"')";
                            ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                            
                            sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, barberos.nombre_usuario AS Barbero, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                    + "FROM barberos, servicios, ventasservicios "
                                    + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') "
                                    + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                            if(banderita == true){
                                sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                        + "FROM barberos, ventasservicios "
                                        + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') ";
                                ConsultarVentasTotalS(sqlVST);
                            }
                        }else{
                            sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND MONTH(agenda.fecha) = MONTH('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                            sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND MONTH(agenda.fecha) = MONTH('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                            sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE MONTH(agenda.fecha) = MONTH('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                            ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                            
                            sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, barberos.nombre_usuario AS Barbero, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                    + "FROM barberos, servicios, ventasservicios "
                                    + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                    + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                            if(banderita == true){
                                sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                        + "FROM barberos, ventasservicios "
                                        + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                                ConsultarVentasTotalS(sqlVST);
                            }
                        }
                    }
                    case "Anual" -> {
                        if(b.compareTo("...") ==0){
                            sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND YEAR(agenda.fecha) = YEAR('"+f2+"') ";
                            sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND YEAR(agenda.fecha) = YEAR('"+f2+"') ";
                            sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE YEAR(agenda.fecha) = YEAR('"+f2+"')";
                            ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                            
                            sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, barberos.nombre_usuario AS Barbero, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                    + "FROM barberos, servicios, ventasservicios "
                                    + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') "
                                    + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                            if(banderita == true){
                                sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                        + "FROM barberos, ventasservicios "
                                        + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') ";
                                ConsultarVentasTotalS(sqlVST);
                            }
                        }else{
                            sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND YEAR(agenda.fecha) = YEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                            sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND YEAR(agenda.fecha) = YEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                            sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE YEAR(agenda.fecha) = YEAR('"+f2+"') AND agenda.id_barbero = "+idBarbero+" ";
                            ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                            
                            sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, barberos.nombre_usuario AS Barbero, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                    + "FROM barberos, servicios, ventasservicios "
                                    + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                    + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                            if(banderita == true){
                                sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                        + "FROM barberos, ventasservicios "
                                        + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                                ConsultarVentasTotalS(sqlVST);
                            }
                        }
                    }
                    case "Siempre" ->{
                        if(b.compareTo("...") ==0){
                            sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' ";
                            sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' ";
                            sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda";
                            ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                            
                            sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, barberos.nombre_usuario AS Barbero, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                    + "FROM barberos, servicios, ventasservicios "
                                    + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero "
                                    + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                            if(banderita == true){
                                sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                        + "FROM barberos, ventasservicios "
                                        + "WHERE ventasservicios.id_barbero = barberos.id_barbero ";
                                ConsultarVentasTotalS(sqlVST);
                            }
                        }else{
                            sqlCACanceladas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'no' AND agenda.id_barbero = "+idBarbero+" ";
                            sqlCAConfirmadas = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.confirmar = 'si' AND agenda.id_barbero = "+idBarbero+" ";
                            sqlCATotales = "SELECT COUNT(agenda.id_agenda) AS Total FROM agenda WHERE agenda.id_barbero = "+idBarbero+" ";
                            ConsultarCitas(sqlCACanceladas,sqlCAConfirmadas,sqlCATotales,f2,p);
                            
                            sqlVS = "SELECT ventasservicios.precio_eventual AS Precio, servicios.servicio AS Servicio, barberos.nombre_usuario AS Barbero, ventasservicios.fecha AS Fecha, ventasservicios.hora AS Hora "
                                    + "FROM barberos, servicios, ventasservicios "
                                    + "WHERE ventasservicios.id_servicio = servicios.id_servicio AND ventasservicios.id_barbero = barberos.id_barbero AND barberos.id_barbero = "+idBarbero+" "
                                    + "ORDER BY ventasservicios.fecha DESC, ventasservicios.hora ASC";
                            banderita = ConsultarVentasS(sqlVS,f2,p);
                            if(banderita == true){
                                sqlVST = "SELECT DISTINCT SUM(ventasservicios.precio_eventual) AS Total "
                                        + "FROM barberos, ventasservicios "
                                        + "WHERE ventasservicios.id_barbero = barberos.id_barbero AND barberos.id_barbero = "+idBarbero+" ";
                                ConsultarVentasTotalS(sqlVST);
                            }
                        }
                    }
                    default -> {
                        //System.out.println("CACA");
                    }
                }
            }
        }           
    }//GEN-LAST:event_BotonConfirmarServActionPerformed

    private void LeerServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeerServicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LeerServicioActionPerformed

    private void BotonServAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonServAgregarActionPerformed
        if(LeerServicio.getText().equals("") || LeerServPrecio.getText().equals("") || ElegirServDuracion.getSelectedItem().toString().equals("..."))
            JOptionPane.showMessageDialog(null, "Rellene todos los campos.");
        else {
            if(JOptionPane.showInternalConfirmDialog(null, "¬øConfirmar Insercion Del Servicio:"+LeerServicio.getText()+"? (Verifique que los datos sean correctos).") == 0){
                AgregarServicio();
                ConsultarServicios();
            }
        }
    }//GEN-LAST:event_BotonServAgregarActionPerformed

    private void BotonConfirmarProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonConfirmarProdActionPerformed
        //BotonConfirmarProd.setEnabled(false);
        //BotonConfirmarServ.setEnabled(true);
        
        TextoTotalServ.setVisible(false);
        BotonOjo.setVisible(false);
        RespuestaTotalServ1.setVisible(false);
        TextoTotalProd.setVisible(false);
        RespuestaTotalProd1.setVisible(false);
        TextoCantidadServ.setVisible(false);
        RespuestaCantidadServ1.setVisible(false);
        TextoCantidadProd.setVisible(false);
        RespuestaCantidadProd1.setVisible(false);
        TextoGBarberia.setVisible(false);
        TextoGBarbero.setVisible(false);
        RespuestaGBarberia.setVisible(false);
        RespuestaGBarbero.setVisible(false);
        TextoInsumos.setVisible(false);
        RespuestaInsumos.setVisible(false);
        TextoTicketPromedio.setVisible(false);
        RespuestaTicketPromedio.setVisible(false);
        TextoCancelados.setVisible(false);
        RespuestaCancelados.setVisible(false);
        TextoConfirmados.setVisible(false);
        RespuestaConfirmados.setVisible(false);
        TextoTotales.setVisible(false);
        RespuestaTotales.setVisible(false);
        TextoCitas.setVisible(false);
        TextoVentas2.setVisible(false);
        ScrollVentasServ.setVisible(false);
        ScrollVentasProd.setVisible(false);
        TextoVentasServicios.setVisible(false);
        TextoVentasProductos.setVisible(false);
        if(LeerPeriodo.getSelectedItem().toString().compareTo("...")==0  || ElegirFecha.getDate() == null)
            JOptionPane.showMessageDialog(null,"Seleccione Todos los campos.");
        else{           
            //Fecha De Hoy
            Date fechaActual = new Date();
            String f;
            SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
            f = formatoFecha.format(fechaActual);   //Contiene la fecha de hoy
            //System.out.println("Fecha de Hoy:"+f);
                
            //Fecha Seleccionada
            Date fechaSeleccionada = ElegirFecha.getDate();
            String f2;
            SimpleDateFormat formatoFecha2 = new SimpleDateFormat("yyyy-MM-dd");
            f2 = formatoFecha2.format(fechaSeleccionada);   //Contiene la fecha Seleccionada
            //System.out.println("Fecha Seleccionada:"+f2);
            if(f2.compareTo(f) > 0)
                JOptionPane.showMessageDialog(null,"No existen registros para dias siguientes de hoy");
            else{
                Barberos barbero = (Barberos) SeleccionarVentasBarbero.getSelectedItem();
                int idBarbero = barbero.getId();
                String sqlVP;
                String sqlVPT;
                String p = LeerPeriodo.getSelectedItem().toString();
                String b = SeleccionarVentasBarbero.getSelectedItem().toString();
                boolean banderita = false;
                switch (p) {
                    case "Dia" -> {
                        if(b.compareTo("...") ==0){
                            sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, barberos.nombre_usuario AS Barbero, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                         + "FROM barberos, productos, ventasproductos "
                                         + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"' "
                                         + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                            banderita = ConsultarVentasP(sqlVP,f2,p);
                            if(banderita == true){
                                sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                             + "FROM barberos, ventasproductos "
                                             + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"'";
                                ConsultarVentasTotalP(sqlVPT);
                            }
                        }else{
                            sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, barberos.nombre_usuario AS Barbero, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                         + "FROM barberos, productos, ventasproductos "
                                         + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"' AND barberos.id_barbero = "+idBarbero+" "
                                         + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                            banderita = ConsultarVentasP(sqlVP,f2,p);
                            if(banderita == true){
                                sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                             + "FROM barberos, ventasproductos "
                                             + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND Fecha = '"+f2+"' AND barberos.id_barbero = "+idBarbero+" ";
                                ConsultarVentasTotalP(sqlVPT);
                            }
                        }
                    }
                    case "Semanal" -> {
                        if(b.compareTo("...") ==0){
                            sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, barberos.nombre_usuario AS Barbero, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                         + "FROM barberos, productos, ventasproductos "
                                         + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') "
                                         + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                            banderita = ConsultarVentasP(sqlVP,f2,p);
                            if(banderita == true){
                                sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                             + "FROM barberos, ventasproductos "
                                             + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') ";
                                ConsultarVentasTotalP(sqlVPT);
                            }
                        }else{
                            sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, barberos.nombre_usuario AS Barbero, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                         + "FROM barberos, productos, ventasproductos "
                                         + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                         + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                            banderita = ConsultarVentasP(sqlVP,f2,p);
                            if(banderita == true){
                                sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                             + "FROM barberos, ventasproductos "
                                             + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND WEEKOFYEAR(fecha) = WEEKOFYEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                                ConsultarVentasTotalP(sqlVPT);
                            }
                        }
                    }
                    case "Mensual" -> {
                        if(b.compareTo("...") ==0){
                            sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, barberos.nombre_usuario AS Barbero, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                         + "FROM barberos, productos, ventasproductos "
                                         + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') "
                                         + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                            banderita = ConsultarVentasP(sqlVP,f2,p);
                            if(banderita == true){
                                sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                             + "FROM barberos, ventasproductos "
                                             + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') ";
                                ConsultarVentasTotalP(sqlVPT);
                            }
                        }else{
                            sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, barberos.nombre_usuario AS Barbero, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                         + "FROM barberos, productos, ventasproductos "
                                         + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                         + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                            banderita = ConsultarVentasP(sqlVP,f2,p);
                            if(banderita == true){
                                sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                             + "FROM barberos, ventasproductos "
                                             + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND MONTH(fecha) = MONTH('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                                ConsultarVentasTotalP(sqlVPT);
                            }
                        }
                    }
                    case "Anual" -> {
                        if(b.compareTo("...") ==0){
                            sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, barberos.nombre_usuario AS Barbero, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                         + "FROM barberos, productos, ventasproductos "
                                         + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') "
                                         + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                            banderita = ConsultarVentasP(sqlVP,f2,p);
                            if(banderita == true){
                                sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                             + "FROM barberos, ventasproductos "
                                             + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') ";
                                ConsultarVentasTotalP(sqlVPT);
                            }
                        }else{
                            sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, barberos.nombre_usuario AS Barbero, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                         + "FROM barberos, productos, ventasproductos "
                                         + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" "
                                         + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                            banderita = ConsultarVentasP(sqlVP,f2,p);
                            if(banderita == true){
                                sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                             + "FROM barberos, ventasproductos "
                                             + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND YEAR(fecha) = YEAR('"+f2+"') AND barberos.id_barbero = "+idBarbero+" ";
                                ConsultarVentasTotalP(sqlVPT);
                            }
                        }
                    }
                    case "Siempre" -> {
                        if(b.compareTo("...") ==0){
                            sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, barberos.nombre_usuario AS Barbero, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                         + "FROM barberos, productos, ventasproductos "
                                         + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero "
                                         + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                            banderita = ConsultarVentasP(sqlVP,f2,p);
                            if(banderita == true){
                                sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                             + "FROM barberos, ventasproductos "
                                             + "WHERE ventasproductos.id_barbero = barberos.id_barbero ";
                                ConsultarVentasTotalP(sqlVPT);
                            }
                        }else{
                            sqlVP = "SELECT ventasproductos.precio_eventual AS Precio, productos.producto AS Producto, barberos.nombre_usuario AS Barbero, ventasproductos.fecha AS Fecha, ventasproductos.hora AS Hora "
                                         + "FROM barberos, productos, ventasproductos "
                                         + "WHERE ventasproductos.id_producto = productos.id_producto AND ventasproductos.id_barbero = barberos.id_barbero AND barberos.id_barbero = "+idBarbero+" "
                                         + "ORDER BY ventasproductos.fecha DESC, ventasproductos.hora ASC";
                            banderita = ConsultarVentasP(sqlVP,f2,p);
                            if(banderita == true){
                                sqlVPT = "SELECT DISTINCT SUM(ventasproductos.precio_eventual) AS Total "
                                             + "FROM barberos, ventasproductos "
                                             + "WHERE ventasproductos.id_barbero = barberos.id_barbero AND barberos.id_barbero = "+idBarbero+" ";
                                ConsultarVentasTotalP(sqlVPT);
                            }
                        }
                    }
                    default -> {
                        //System.out.println("CACA");
                    }
                }
            }
        }
        
    }//GEN-LAST:event_BotonConfirmarProdActionPerformed

    private void BotonServLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonServLimpiarActionPerformed
        LimpiarServField();
    }//GEN-LAST:event_BotonServLimpiarActionPerformed

    private void BotonServModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonServModificarActionPerformed
        int fila = TablaServicios.getSelectedRow();
        if(fila >= 0){
            //RespuestaServId.setEnabled(false);
            RespuestaServId.setText(TablaServicios.getValueAt(fila, 0).toString());
            LeerServicio.setText(TablaServicios.getValueAt(fila, 1).toString());
            LeerServPrecio.setText(TablaServicios.getValueAt(fila, 2).toString());
            ElegirServDuracion.setSelectedItem(TablaServicios.getValueAt(fila, 3).toString());
        }else{
            JOptionPane.showMessageDialog(null,"Seleccione Una Fila De La Tabla.");
        }
    }//GEN-LAST:event_BotonServModificarActionPerformed

    private void BotonServActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonServActualizarActionPerformed
        if(RespuestaServId.getText().equals("") && LeerServicio.getText().equals("") && LeerServPrecio.getText().equals(""))
            JOptionPane.showMessageDialog(null,"Campos Vacios.");
        else
            if(LeerServicio.getText().equals(""))
                JOptionPane.showMessageDialog(null,"Campo: Servicio Vacio.");
            else
                if(LeerServPrecio.getText().equals(""))
                    JOptionPane.showMessageDialog(null,"Campo: Precio Vacio.");
                else
                    if(RespuestaServId.getText().equals(""))
                        JOptionPane.showMessageDialog(null,"Servicio Inexistente.");
                    else
                        if(ElegirServDuracion.getSelectedItem().toString().compareTo("...")==0)
                            JOptionPane.showMessageDialog(null,"Seleccione Una Duracion Para El Corte.");
                        else{
                            if(JOptionPane.showInternalConfirmDialog(null, "¬øConfirmar Actualizacion? (Verifique que los datos sean correctos).") == 0){
                                ActualizarServicio();
                                LimpiarServField();
                                ConsultarServicios();
                            }
                        }
    }//GEN-LAST:event_BotonServActualizarActionPerformed

    private void RespuestaServIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RespuestaServIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RespuestaServIdActionPerformed

    private void BotonServEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonServEliminarActionPerformed
        if(RespuestaServId.getText().equals("") && LeerServicio.getText().equals("") && LeerServPrecio.getText().equals(""))
            JOptionPane.showMessageDialog(null,"Campos Vacios.");
        else
            if(LeerServicio.getText().equals(""))
                JOptionPane.showMessageDialog(null,"Campo: Servicio Vacio.");
            else
                if(LeerServPrecio.getText().equals(""))
                    JOptionPane.showMessageDialog(null,"Campo: Precio Vacio.");
                else
                    if(RespuestaServId.getText().equals(""))
                        JOptionPane.showMessageDialog(null,"Servicio Inexistente.");
                    else{
                        if(JOptionPane.showInternalConfirmDialog(null, "¬øSeguro Que Desea Eliminar El Servicio"+LeerServicio.getText()+"?") == 0){
                            EliminarServicio();
                            LimpiarServField();
                            ConsultarServicios();
                        }
                    }
    }//GEN-LAST:event_BotonServEliminarActionPerformed

    private void LeerProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeerProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LeerProductoActionPerformed

    private void BotonProdModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonProdModificarActionPerformed
        int fila = TablaProductos.getSelectedRow();
        if(fila >= 0){
            //RespuestaProdId.setEnabled(false);
            RespuestaProdId.setText(TablaProductos.getValueAt(fila, 0).toString());
            LeerProducto.setText(TablaProductos.getValueAt(fila, 1).toString());
            LeerProdPrecio.setText(TablaProductos.getValueAt(fila, 2).toString());
        }else{
            JOptionPane.showMessageDialog(null,"Seleccione Una Fila De La Tabla.");
        }
    }//GEN-LAST:event_BotonProdModificarActionPerformed

    private void BotonProdLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonProdLimpiarActionPerformed
        LimpiarProdField();
    }//GEN-LAST:event_BotonProdLimpiarActionPerformed

    private void BotonProdAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonProdAgregarActionPerformed
        if(LeerProducto.getText().equals("") || LeerProdPrecio.getText().equals(""))
                JOptionPane.showMessageDialog(null, "Rellene todos los campos.");
            else{
                if(JOptionPane.showInternalConfirmDialog(null, "¬øConfirmar Insercion Del Producto:"+LeerProducto.getText()+"? (Verifique que los datos sean correctos).") == 0){
                    AgregarProducto();
                    ConsultarProductos();
                }
            }
    }//GEN-LAST:event_BotonProdAgregarActionPerformed

    private void BotonProdActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonProdActualizarActionPerformed
        if(RespuestaProdId.getText().equals("") && LeerProducto.getText().equals("") && LeerProdPrecio.getText().equals(""))
            JOptionPane.showMessageDialog(null,"Campos Vacios.");
        else
            if(LeerProducto.getText().equals(""))
                JOptionPane.showMessageDialog(null,"Campo: Producto Vacio.");
            else
                if(LeerProdPrecio.getText().equals(""))
                    JOptionPane.showMessageDialog(null,"Campo: Precio Vacio.");
                else
                    if(RespuestaProdId.getText().equals(""))
                        JOptionPane.showMessageDialog(null,"Producto Inexistente.");
                    else{
                        if(JOptionPane.showInternalConfirmDialog(null, "¬øConfirmar Actualizacion? (Verifique que los datos sean correctos).") == 0){
                            ActualizarProducto();
                            LimpiarProdField();
                            ConsultarProductos();
                        }
                    }
    }//GEN-LAST:event_BotonProdActualizarActionPerformed

    private void BotonProdEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonProdEliminarActionPerformed
        if(RespuestaProdId.getText().equals("") && LeerProducto.getText().equals("") && LeerProdPrecio.getText().equals(""))
            JOptionPane.showMessageDialog(null,"Campos Vacios.");
        else
            if(LeerProducto.getText().equals(""))
                JOptionPane.showMessageDialog(null,"Campo: Producto Vacio.");
            else
                if(LeerProdPrecio.getText().equals(""))
                    JOptionPane.showMessageDialog(null,"Campo: Precio Vacio.");
                else
                    if(RespuestaProdId.getText().equals(""))
                        JOptionPane.showMessageDialog(null,"Producto Inexistente.");
                    else{
                        if(JOptionPane.showInternalConfirmDialog(null, "¬øSeguro Que Desea Eliminar El Producto"+LeerProducto.getText()+"?") == 0){
                            EliminarProducto();
                            LimpiarProdField();
                            ConsultarProductos();
                        }
                    }
    }//GEN-LAST:event_BotonProdEliminarActionPerformed

    private void SeleccionarVentasBarberoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionarVentasBarberoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SeleccionarVentasBarberoActionPerformed

    private void LeerServPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeerServPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LeerServPrecioActionPerformed

    private void BotonOjoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonOjoActionPerformed
        RespuestaGBarberia.setVisible(false);
        if(BotonOjo.isSelected()){
            RespuestaGBarberia.setVisible(true);
        }
    }//GEN-LAST:event_BotonOjoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazAdmin().setVisible(true);
            }
        });
    }
    
    private void restringeNumeros(JTextField a){
        a.addKeyListener(new KeyAdapter(){
            public void keyTyped(KeyEvent e){
                char c = e.getKeyChar();
                if(!Character.isDigit(c) && c!= '.'){
                    e.consume();
                }
                if(c == '.' && a.getText().contains(".")){
                    e.consume();
                }
            }
        });
    }
    
    private void restringeChars(JTextField a){
        a.addKeyListener(new KeyAdapter(){
            public void keyTyped(KeyEvent e){
                char c = e.getKeyChar();
                if(!Character.isLetter(c)){
                    e.consume();
                }
            }
        });
    }
    
    ArrayList ConsultarVentasBarberos(){
        ArrayList nListaBarberos = new ArrayList();
        Barberos nBarberos = null;
        Statement st;
        ResultSet rs;
        String sql = "SELECT * FROM barberos";
        try {
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            
            //rs.next();
            while(rs.next()){
                nBarberos = new Barberos();
                nBarberos.setId(rs.getInt("id_barbero"));
                nBarberos.setBarbero(rs.getString("nombre_usuario"));
                nBarberos.setTipo(rs.getString("tipo_u"));
                if(!nBarberos.getTipo().equals("Administrador"))
                    nListaBarberos.add(nBarberos);
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfazSecre.class.getName()).log(Level.SEVERE, null, ex);
        }
        return nListaBarberos;
    }
    
    void LlenarBarberos(){
        SeleccionarVentasBarbero.removeAllItems();
        nListaBarberos = ConsultarVentasBarberos();
        Iterator iterador = nListaBarberos.iterator();
        //SeleccionarBarbero.addItem("");
        while(iterador.hasNext()){
            Barberos nBarbero = (Barberos) iterador.next();
            SeleccionarVentasBarbero.addItem(nBarbero);
        }
    }
    
    //----------------------------------------Ventas--------------------------------------------------------------------//    
    
    boolean ConsultarVentasS(String sql,String f,String p){
        if(ValidarVentasS(sql,f,p) == true){
            DefaultTableModel modelo;
            modelo = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 5;
                }
            };

            modelo.addColumn("Precio");
            modelo.addColumn("Servicio");
            modelo.addColumn("Barbero");
            modelo.addColumn("Fecha");
            modelo.addColumn("Hora");
            TablaVentasServ.setModel(modelo);

            Object[] cliente = new Object [5];

            try{
                Statement st;
                ResultSet rs;
                int cont = 0;

                st = conexion.cx.createStatement();
                rs = st.executeQuery(sql);
                //ERROR modelo = (DefaultTableModel) TablaVentasServ.getModel();
                while(rs.next()){
                    //rs.getInt("id");
                    cliente [0] = "$"+rs.getString(1);
                    cliente [1] = rs.getString(2);
                    cliente [2] = rs.getString(3);
                    cliente [3] = rs.getString(4);
                    cliente [4] = rs.getString(5);
                    modelo.addRow(cliente);
                    cont++;
                }
                TablaVentasServ.setModel(modelo);
                RespuestaCantidadServ1.setText(""+cont);
                return true;
            }catch(SQLException e){

            }
        }
        return false;
    }
    
    boolean ValidarVentasS(String sql,String f,String p){
        try {
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            
            if(rs.next()){
                BotonOjo.setVisible(true);
                TextoTotalServ.setVisible(true);
                RespuestaTotalServ1.setVisible(true);
                TextoCantidadServ.setVisible(true);
                RespuestaCantidadServ1.setVisible(true);
                TextoGBarberia.setVisible(true);
                TextoGBarbero.setVisible(true);
                //RespuestaGBarberia.setVisible(true);
                RespuestaGBarbero.setVisible(true);
                TextoInsumos.setVisible(true);
                RespuestaInsumos.setVisible(true);
                TextoTicketPromedio.setVisible(true);
                RespuestaTicketPromedio.setVisible(true);
                TextoVentas2.setVisible(true);
                ScrollVentasServ.setVisible(true);
                TextoVentasServicios.setVisible(true);
                return true;
            }else{
                BotonOjo.setVisible(false);
                TextoTotalServ.setVisible(false);
                RespuestaTotalServ1.setVisible(false);
                TextoCantidadServ.setVisible(false);
                RespuestaCantidadServ1.setVisible(false);
                TextoGBarberia.setVisible(false);
                TextoGBarbero.setVisible(false);
                //RespuestaGBarberia.setVisible(false);
                RespuestaGBarbero.setVisible(false);
                TextoInsumos.setVisible(false);
                RespuestaInsumos.setVisible(false);
                TextoTicketPromedio.setVisible(false);
                RespuestaTicketPromedio.setVisible(false);
                TextoVentas2.setVisible(false);
                ScrollVentasServ.setVisible(false);
                TextoVentasServicios.setVisible(false);
                JOptionPane.showMessageDialog(null, "No se registraron ventas de SERVICIOS en la FECHA: "+f+" con PERIODO: "+p+".");
                return false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    void ConsultarVentasTotalS(String sql){
        DecimalFormat formato1 = new DecimalFormat("#.0");
        if(ValidarVentasTotalS(sql)==true){
            try{
                Statement st;
                ResultSet rs;

                st = conexion.cx.createStatement();
                rs = st.executeQuery(sql);

                rs.next();
                String o;
                double o2, gBarberia, gBarbero, insumos,ticketP;
                o = rs.getString("Total");
                o2 = Double.parseDouble(o);

                ticketP = Double.parseDouble(RespuestaCantidadServ1.getText());
                ticketP = o2/ticketP; 
                
                gBarberia = (double) ((o2)*(0.55));
                gBarbero = (double) ((o2)*(0.40));
                insumos = (double) ((o2)*(0.05));

                RespuestaTotalServ1.setText("$"+formato1.format(o2));
                RespuestaGBarberia.setText("$"+formato1.format(gBarberia));
                RespuestaGBarbero.setText("$"+formato1.format(gBarbero));
                RespuestaInsumos.setText("$"+formato1.format(insumos));
                RespuestaTicketPromedio.setText("$"+formato1.format(ticketP));
            }catch(SQLException e){

            }
        }
    }
    
    boolean ValidarVentasTotalS(String sql){
        try {
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            
            if(rs.next())
                return true;
            else
                return false;
        } catch (SQLException ex) {
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    void ConsultarCitas(String sqlCACanceladas, String sqlCAConfirmadas, String sqlCATotales,String f,String p){
        DecimalFormat formato1 = new DecimalFormat("#.0");
        try{
            Statement st1,st2,st3;
            ResultSet rs1,rs2,rs3;
            
            st1 = conexion.cx.createStatement();
            st2 = conexion.cx.createStatement();
            st3 = conexion.cx.createStatement();
            rs1 = st1.executeQuery(sqlCACanceladas);
            rs2 = st2.executeQuery(sqlCAConfirmadas);
            rs3 = st3.executeQuery(sqlCATotales);
            
            rs1.next();
            rs2.next();
            rs3.next();
            
            String o1,o2,o3;
            o1 = rs1.getString("Total");
            o2 = rs2.getString("Total");
            o3 = rs3.getString("Total");
            
            float porcentajeCanceladas,porcentajeConfirmadas,cantidadTotal;
            
            porcentajeCanceladas = Float.parseFloat(o1);
            porcentajeConfirmadas = Float.parseFloat(o2);
            cantidadTotal = Float.parseFloat(o3);
            
            if(cantidadTotal == 0){
                TextoCancelados.setVisible(false);
                RespuestaCancelados.setVisible(false);
                TextoConfirmados.setVisible(false);
                RespuestaConfirmados.setVisible(false);
                TextoTotales.setVisible(false);
                RespuestaTotales.setVisible(false);
                TextoCitas.setVisible(false);
                JOptionPane.showMessageDialog(null, "No se registraron CITAS para la FECHA: "+f+" con PERIODO: "+p+".");
            }else{
                TextoCancelados.setVisible(true);
                RespuestaCancelados.setVisible(true);
                TextoConfirmados.setVisible(true);
                RespuestaConfirmados.setVisible(true);
                TextoTotales.setVisible(true);
                RespuestaTotales.setVisible(true);
                TextoCitas.setVisible(true);
                //System.out.println(porcentajeCanceladas);
                //System.out.println(porcentajeConfirmadas);

                porcentajeCanceladas = (float) (porcentajeCanceladas/cantidadTotal)*100;
                porcentajeConfirmadas = (float) (porcentajeConfirmadas/cantidadTotal)*100;

                RespuestaCancelados.setText(formato1.format(porcentajeCanceladas)+"%");
                RespuestaConfirmados.setText(formato1.format(porcentajeConfirmadas)+"%");
                RespuestaTotales.setText(o3);
            }
        }catch(SQLException e){
            
        }
    }
    
    boolean ConsultarVentasP(String sql,String f,String p){
        if(ValidarVentasP(sql,f,p)==true){
            DefaultTableModel modelo;
            modelo = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 5;
                }
            };

            modelo.addColumn("Precio");
            modelo.addColumn("Producto");
            modelo.addColumn("Barbero");
            modelo.addColumn("Fecha");
            modelo.addColumn("Hora");
            TablaVentasProd.setModel(modelo);

            Object[] cliente = new Object [5];

            try{
                Statement st;
                ResultSet rs;
                int cont = 0;

                st = conexion.cx.createStatement();
                rs = st.executeQuery(sql);
                //ERROR modelo = (DefaultTableModel) TablaVentasServ.getModel();
                while(rs.next()){
                    //rs.getInt("id");
                    cliente [0] = "$"+rs.getString(1);
                    cliente [1] = rs.getString(2);
                    cliente [2] = rs.getString(3);
                    cliente [3] = rs.getString(4);
                    cliente [4] = rs.getString(5);
                    modelo.addRow(cliente);
                    cont++;
                }
                TablaVentasProd.setModel(modelo);
                RespuestaCantidadProd1.setText(""+cont);
                return true;
            }catch(SQLException e){

            }
        }
        return false;
    }
    
    boolean ValidarVentasP(String sql,String f,String p){
        try {
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            
            if(rs.next()){
                BotonOjo.setVisible(true);
                TextoTotalProd.setVisible(true);
                RespuestaTotalProd1.setVisible(true);
                TextoGBarberia.setVisible(true);
                TextoGBarbero.setVisible(true);
                //RespuestaGBarberia.setVisible(true);
                RespuestaGBarbero.setVisible(true);
                TextoInsumos.setVisible(true);
                RespuestaInsumos.setVisible(true);
                TextoTicketPromedio.setVisible(true);
                RespuestaTicketPromedio.setVisible(true);
                TextoVentas2.setVisible(true);
                TextoCantidadProd.setVisible(true);
                RespuestaCantidadProd1.setVisible(true);
                ScrollVentasProd.setVisible(true);
                TextoVentasProductos.setVisible(true);
                return true;
            }else{
                BotonOjo.setVisible(false);
                TextoTotalProd.setVisible(false);
                RespuestaTotalProd1.setVisible(false);
                TextoGBarberia.setVisible(false);
                TextoGBarbero.setVisible(false);
                //RespuestaGBarberia.setVisible(false);
                RespuestaGBarbero.setVisible(false);
                TextoInsumos.setVisible(false);
                RespuestaInsumos.setVisible(false);
                TextoTicketPromedio.setVisible(false);
                RespuestaTicketPromedio.setVisible(false);
                TextoVentas2.setVisible(false);
                TextoCantidadProd.setVisible(false);
                RespuestaCantidadProd1.setVisible(false);
                ScrollVentasProd.setVisible(false);
                TextoVentasProductos.setVisible(false);
                JOptionPane.showMessageDialog(null, "No se registraron ventas de PRODUCTOS en la FECHA: "+f+" con PERIODO: "+p+".");
                return false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    void ConsultarVentasTotalP(String sql){
        DecimalFormat formato1 = new DecimalFormat("#.0");
        if(ValidarVentasTotalP(sql)==true){
            try{
                Statement st;
                ResultSet rs;

                st = conexion.cx.createStatement();
                rs = st.executeQuery(sql);

                rs.next();
                String o;
                double o2, gBarberia, gBarbero, insumos,ticketP;
                o = rs.getString("Total");
                o2 = Double.parseDouble(o);

                ticketP = Double.parseDouble(RespuestaCantidadProd1.getText());
                ticketP = o2/ticketP;

                gBarberia = (double) ((o2)*(0.55));
                gBarbero = (double) ((o2)*(0.40));
                insumos = (double) ((o2)*(0.05));

                RespuestaTotalProd1.setText("$"+formato1.format(o2));
                RespuestaGBarberia.setText("$"+formato1.format(gBarberia));
                RespuestaGBarbero.setText("$"+formato1.format(gBarbero));
                RespuestaInsumos.setText("$"+formato1.format(insumos));
                RespuestaTicketPromedio.setText("$"+formato1.format(ticketP));
            }catch(SQLException e){

            }
        }
    }
    
    boolean ValidarVentasTotalP(String sql){
        try {
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            
            if(rs.next())
                return true;
            else
                return false;
        } catch (SQLException ex) {
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    //----------------------------------------Servicios--------------------------------------------------------------------//
    
    void ConsultarServicios(){
        DefaultTableModel modelo;
        modelo = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 4;
            }
        };
                
        modelo.addColumn("Id");
        modelo.addColumn("Servicio");
        modelo.addColumn("Precio");
        modelo.addColumn("Duracion");
        TablaServicios.setModel(modelo);
        
        String sql = "SELECT * FROM servicios";
        //System.out.println(sql);
        Object[] cliente = new Object [4];
        
        try{
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            if(rs.next()){
                rs = st.executeQuery(sql);
                rs.next();      //Servicio nulo
                while(rs.next()){
                    //rs.getInt("id");
                    cliente [0] = rs.getString(1);
                    cliente [1] = rs.getString(2);
                    cliente [2] = rs.getString(3);
                    cliente [3] = rs.getString(4);
                    modelo.addRow(cliente);
                }            
                TablaServicios.setModel(modelo);
            }else{
                JOptionPane.showMessageDialog(null, "No se han registrado servicios. Puede comenzar ahora.");
            }
        }catch(SQLException e){
            
        }
    }
    
    void LimpiarServField(){
        LeerServicio.setText("");
        LeerServPrecio.setText("");
        RespuestaServId.setText("");
        ElegirServDuracion.setSelectedItem("...");
    }
    
    void AgregarServicio(){
        String servicio = LeerServicio.getText();
        float precio;
        try{    
            Statement st;
            ResultSet rs;
            
            int dur = 0;
            String duracion = ElegirServDuracion.getSelectedItem().toString();
            switch (duracion) {
                case "30 min" -> dur = 1;
                case "60 min" -> dur = 2;
                case "90 min" -> dur = 3;
                case "120 min" -> dur = 4;
                default -> {
                }
            }
            //System.out.println(duracion);
            precio = Float.parseFloat(LeerServPrecio.getText());
            boolean bandera = false;//Para verificar que los datos no sean repetidos
            st = conexion.cx.createStatement();
            rs = st.executeQuery("Select * From servicios");
            Collator comparador = Collator.getInstance();
            comparador.setStrength(Collator.PRIMARY);
            String aux;
            while (rs.next() && bandera == false){
                aux = rs.getString("servicio");
                if(comparador.equals(aux, servicio)){
                    bandera = true;
                    JOptionPane.showMessageDialog(null,"Servicio: "+servicio+" ya existe.");
                }
            }
            if(bandera == false){//Para ingresar el nuevo usuario
                PreparedStatement pps = conexion.cx.prepareStatement("INSERT INTO servicios(servicio,precio,duracion,dur) VALUES(?,?,?,?)");
                pps.setString(1,servicio);
                pps.setFloat(2, precio);
                pps.setString(3, duracion);
                pps.setInt(4, dur);
                pps.executeUpdate();
                JOptionPane.showMessageDialog(null,"Servicio:"+servicio+" Guardado.");
            }                
        }catch (SQLException ex){
            Logger.getLogger(InterfazRegistrarse.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void ActualizarServicio(){
        int dur = 0;
        String duracion = ElegirServDuracion.getSelectedItem().toString();
        switch (duracion) {
            case "30 min" -> dur = 1;
            case "60 min" -> dur = 2;
            case "90 min" -> dur = 3;
            case "120 min" -> dur = 4;
            default -> {
            }
        }
        String precio = LeerServPrecio.getText();
        //System.out.println(duracion);
        //System.out.println(precio);
        String sql = "UPDATE servicios SET servicio = '"+LeerServicio.getText()+"', precio = "+precio+", duracion = '"+duracion+"', dur = "+dur+" "
            + "WHERE id_servicio = "+RespuestaServId.getText()+"";
        try {
            PreparedStatement pps = conexion.cx.prepareStatement(sql);
            pps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Servicio:"+LeerServicio.getText()+" Actualizado.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error Al Actualizar El Servicio:"+LeerServicio.getText()+".");
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void EliminarServicio(){
        String sql = "DELETE FROM servicios WHERE id_servicio = "+RespuestaServId.getText()+"";
        try {
            PreparedStatement pps = conexion.cx.prepareStatement(sql);
            pps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Servicio:"+LeerServicio.getText()+" Eliminado.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error Al Eliminar El Servicio:"+LeerServicio.getText()+".");
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    //----------------------------------------Productos--------------------------------------------------------------------//
    
    void ConsultarProductos(){
        DefaultTableModel modelo;
        modelo = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 3;
            }
        };
                
        modelo.addColumn("Id");
        modelo.addColumn("Producto");
        modelo.addColumn("Precio");
        TablaServicios.setModel(modelo);
        
        String sql = "SELECT * FROM productos";
        //System.out.println(sql);
        Object[] cliente = new Object [3];
        
        try{
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            
            if(rs.next()){
                rs = st.executeQuery(sql);
                rs.next();      //Servicio nulo
                while(rs.next()){
                    //rs.getInt("id");
                    cliente [0] = rs.getString(1);
                    cliente [1] = rs.getString(2);
                    cliente [2] = rs.getString(3);
                    modelo.addRow(cliente);
                }            
                TablaProductos.setModel(modelo);
            }else{
                JOptionPane.showMessageDialog(null, "No se han registrado productos. Puede comenzar ahora.");
            }
        }catch(SQLException e){
            
        }
    }
    
    void LimpiarProdField(){
        LeerProducto.setText("");
        LeerProdPrecio.setText("");
        RespuestaProdId.setText("");
    }
    
    void AgregarProducto(){
        String producto = LeerProducto.getText();
        float precio;
        try{
            Statement st;
            ResultSet rs;
                
            precio = Float.parseFloat(LeerProdPrecio.getText());             
            boolean bandera = false;//Para verificar que los datos no sean repetidos
            st = conexion.cx.createStatement();
            rs = st.executeQuery("Select * From productos");
            Collator comparador = Collator.getInstance();
            comparador.setStrength(Collator.PRIMARY);
            String aux;
            while (rs.next() && bandera == false){
                aux = rs.getString("producto");
                if(comparador.equals(aux, producto)){
                    bandera = true;
                    JOptionPane.showMessageDialog(null,"Producto: "+producto+" ya existe.");
                }
            }
            if(bandera == false){//Para ingresar el nuevo usuario
                PreparedStatement pps = conexion.cx.prepareStatement("INSERT INTO productos(producto,precio) VALUES(?,?)");
                pps.setString(1,producto);
                pps.setFloat(2, precio);
                pps.executeUpdate();
                JOptionPane.showMessageDialog(null,"Producto:"+producto+" Guardado.");
            }                
        }catch (SQLException ex){
            Logger.getLogger(InterfazRegistrarse.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void ActualizarProducto(){
        String sql = "UPDATE productos SET producto = '"+LeerProducto.getText()+"', precio = "+LeerProdPrecio.getText()+" WHERE id_producto = "+RespuestaProdId.getText()+"";
        try {
            PreparedStatement pps = conexion.cx.prepareStatement(sql);
            pps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Producto:"+LeerProducto.getText()+" Actualizado.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error Al Actualizar El Producto:"+LeerProducto.getText()+".");
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void EliminarProducto(){
        String sql = "DELETE FROM productos WHERE id_producto = "+RespuestaProdId.getText()+"";
        try {
            PreparedStatement pps = conexion.cx.prepareStatement(sql);
            pps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Producto:"+LeerProducto.getText()+" Eliminado.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error Al Eliminar El Producto:"+LeerProducto.getText()+".");
            Logger.getLogger(InterfazAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //----------------------------------------Barberos--------------------------------------------------------------------//
    
    void ConsultarBarberos(){
        DefaultTableModel modelo;
        modelo = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 6;
            }
        };
        
        modelo.addColumn("Id");
        modelo.addColumn("Barbero");
        modelo.addColumn("Nombre(s)");
        modelo.addColumn("Apellidos");
        modelo.addColumn("Edad");
        modelo.addColumn("Direccion");
        TablaBarberos.setModel(modelo);
        
        String sql = "SELECT * FROM barberos";
        //System.out.println(sql);
        Object[] cliente = new Object [6];
        String tipo;
        
        try{
            Statement st;
            ResultSet rs;
            
            st = conexion.cx.createStatement();
            rs = st.executeQuery(sql);
            rs.next();      //Barbero nulo
            while(rs.next()){
                tipo = rs.getString("tipo_u");
                if(!tipo.equals("Administrador")){
                    cliente [0] = rs.getString("id_barbero");
                    cliente [1] = rs.getString("nombre_usuario");
                    cliente [2] = rs.getString("nombres");
                    cliente [3] = rs.getString("apellidos");
                    cliente [4] = rs.getString("edad")+" a√±os";
                    cliente [5] = rs.getString("direccion");
                    modelo.addRow(cliente);
                }
            }            
            TablaBarberos.setModel(modelo);
        }catch(SQLException e){
            
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonBarberos;
    private javax.swing.JButton BotonConfirmarProd;
    private javax.swing.JButton BotonConfirmarServ;
    private javax.swing.JButton BotonInicio;
    private javax.swing.JButton BotonMinimizar;
    private javax.swing.JToggleButton BotonOjo;
    private javax.swing.JButton BotonPerfil;
    private javax.swing.JButton BotonProdActualizar;
    private javax.swing.JButton BotonProdAgregar;
    private javax.swing.JButton BotonProdEliminar;
    private javax.swing.JButton BotonProdLimpiar;
    private javax.swing.JButton BotonProdModificar;
    private javax.swing.JButton BotonProductos;
    private javax.swing.JButton BotonSalir;
    private javax.swing.JButton BotonServActualizar;
    private javax.swing.JButton BotonServAgregar;
    private javax.swing.JButton BotonServEliminar;
    private javax.swing.JButton BotonServLimpiar;
    private javax.swing.JButton BotonServModificar;
    private javax.swing.JButton BotonServicios;
    private javax.swing.JButton BotonVentas;
    private com.toedter.calendar.JDateChooser ElegirFecha;
    private javax.swing.JComboBox<String> ElegirServDuracion;
    private javax.swing.JComboBox<String> LeerPeriodo;
    private javax.swing.JTextField LeerProdPrecio;
    private javax.swing.JTextField LeerProducto;
    private javax.swing.JTextField LeerServPrecio;
    private javax.swing.JTextField LeerServicio;
    private javax.swing.JLabel MarcaDeAgua;
    private javax.swing.JLabel RespuestaCancelados;
    private javax.swing.JLabel RespuestaCantidadProd1;
    private javax.swing.JLabel RespuestaCantidadServ1;
    private javax.swing.JLabel RespuestaConfirmados;
    private javax.swing.JLabel RespuestaGBarberia;
    private javax.swing.JLabel RespuestaGBarbero;
    private javax.swing.JLabel RespuestaInsumos;
    private javax.swing.JTextField RespuestaProdId;
    private javax.swing.JTextField RespuestaServId;
    private javax.swing.JLabel RespuestaTicketPromedio;
    private javax.swing.JLabel RespuestaTotalProd1;
    private javax.swing.JLabel RespuestaTotalServ1;
    private javax.swing.JLabel RespuestaTotales;
    private javax.swing.JScrollPane ScrollBarberos;
    private javax.swing.JScrollPane ScrollProductos;
    private javax.swing.JScrollPane ScrollServicios;
    private javax.swing.JScrollPane ScrollVentasProd;
    private javax.swing.JScrollPane ScrollVentasServ;
    private javax.swing.JComboBox<Barberos> SeleccionarVentasBarbero;
    private javax.swing.JTable TablaBarberos;
    private javax.swing.JTable TablaProductos;
    private javax.swing.JTable TablaServicios;
    private javax.swing.JTable TablaVentasProd;
    private javax.swing.JTable TablaVentasServ;
    private javax.swing.JLabel TextoBarberos;
    private javax.swing.JLabel TextoCRUDDuracion;
    private javax.swing.JLabel TextoCRUDProdId;
    private javax.swing.JLabel TextoCRUDProdPrecio;
    private javax.swing.JLabel TextoCRUDProducto;
    private javax.swing.JLabel TextoCRUDServId;
    private javax.swing.JLabel TextoCRUDServPrecio;
    private javax.swing.JLabel TextoCRUDServicio;
    private javax.swing.JLabel TextoCancelados;
    private javax.swing.JLabel TextoCantidadProd;
    private javax.swing.JLabel TextoCantidadServ;
    private javax.swing.JLabel TextoCitas;
    private javax.swing.JLabel TextoConfirmados;
    private javax.swing.JLabel TextoFecha;
    private javax.swing.JLabel TextoGBarberia;
    private javax.swing.JLabel TextoGBarbero;
    private javax.swing.JLabel TextoInsumos;
    private javax.swing.JLabel TextoOpciones;
    private javax.swing.JLabel TextoPeriodo;
    private javax.swing.JLabel TextoProductos;
    private javax.swing.JLabel TextoServicios;
    private javax.swing.JLabel TextoTicketPromedio;
    private javax.swing.JLabel TextoTitulo;
    private javax.swing.JLabel TextoTotalProd;
    private javax.swing.JLabel TextoTotalServ;
    private javax.swing.JLabel TextoTotales;
    private javax.swing.JLabel TextoVentas;
    private javax.swing.JLabel TextoVentas2;
    private javax.swing.JLabel TextoVentasBarbero;
    private javax.swing.JLabel TextoVentasProductos;
    private javax.swing.JLabel TextoVentasServicios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
